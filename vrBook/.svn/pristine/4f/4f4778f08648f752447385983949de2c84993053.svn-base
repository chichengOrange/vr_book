package com.onway.web.controller.book;

import java.text.MessageFormat;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import io.netty.handler.codec.http.HttpServerCodec;
import io.netty.util.Version;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.onway.fyapp.common.dal.daointerface.VersionDAO;
import com.onway.fyapp.common.dal.dataobject.VersionDO;
import com.onway.fyapp.common.dal.dataobject.returnObj.VersionInfo;
import com.onway.model.enums.StatusEnum;
import com.onway.platform.common.exception.BaseRuntimeException;
import com.onway.platform.common.service.util.AssertUtil;
import com.onway.web.controller.AbstractController;
import com.onway.web.controller.result.JsonQueryResult;
import com.onway.web.controller.result.JsonResult;

/**
 * 
 * @author lishuaikai
 *
 * 2018年7月16日 下午3:07:43
 */
@Controller
public class HomeController extends AbstractController{

	@Resource
	private VersionDAO versionDAO;
	
	/**
	 * 关于我们
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "aboutUs.do")
	@ResponseBody
	public Object aboutUs(HttpServletRequest request){
		JsonQueryResult<String> result = new JsonQueryResult<String>(true);
		try {
			result.setObj(sysConfigCacheManager.getConfigValue("ABOUT_US"));
		} catch (BaseRuntimeException e) {
			// TODO: handle exception
			return new JsonResult(false, "", MessageFormat.format("查看失败：{0}", new Object[]{e.getMessage()}));
		} catch (Exception e) {
			// TODO: handle exception
			return new JsonResult(false, "", MessageFormat.format("查看异常：{0}", new Object[]{e.getMessage()}));
		}
		return result;
	}
	
	
	@RequestMapping(value = "updateExplain.do")
	@ResponseBody
	public Object updateExplain(HttpServletRequest request){
		JsonQueryResult<String> result = new JsonQueryResult<String>(true);
		String type = request.getParameter("type");
		try {
			AssertUtil.notBlank(type, "系统不能为空");
			VersionDO versionDO = versionDAO.queryNewVersion(type, StatusEnum.ENABLED.getCode());
			if(versionDO != null){
				result.setObj(versionDO.getMemo());
			}
		} catch (BaseRuntimeException e) {
			// TODO: handle exception
			return new JsonResult(false, "", MessageFormat.format("获取更新说明失败：{0}", new Object[]{e.getMessage()}));
		} catch (Exception e) {
			// TODO: handle exception
			return new JsonResult(false, "", MessageFormat.format("获取更新说明异常：{0}", new Object[]{e.getMessage()}));
		}
		return result;
	}
	
	/**
	 * 检查更新接口
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "updateVersion.do")
	@ResponseBody
	public Object updateVersion(HttpServletRequest request){
		JsonQueryResult<VersionInfo> result = new JsonQueryResult<VersionInfo>(true);
		String version = request.getParameter("version");
		String type = request.getParameter("type");
		try {
			AssertUtil.notBlank(version, "版本号不能为空");
			AssertUtil.notBlank(type, "系统不能为空");
			String newest = sysConfigCacheManager.getConfigValue("VERSION_"+type);
			int nowVersion = Integer.parseInt(version.replaceAll(".", ""));
			int newestVersion = Integer.parseInt(newest.replaceAll(".", ""));
			VersionInfo info = new VersionInfo();
			if(newestVersion > nowVersion){
				info.setNeedUpdate(true);
				info.setVersionNum(newest);
				info.setDownloadUrl(sysConfigCacheManager.getConfigValue("APP_"+type));
				VersionDO versionDO = versionDAO.queryVersion(newest, type, StatusEnum.ENABLED.getCode());
				if(versionDO != null){
					info.setDescribe(versionDO.getMemo());
				}
			}else{
				info.setNeedUpdate(false);
				info.setVersionNum(newest);
			}
			result.setObj(info);
		} catch (BaseRuntimeException e) {
			// TODO: handle exception
			return new JsonResult(false, "", MessageFormat.format("检查更新失败：{0}", new Object[]{e.getMessage()}));
		} catch (Exception e) {
			// TODO: handle exception
			return new JsonResult(false, "", MessageFormat.format("检查更新异常：{0}", new Object[]{e.getMessage()}));
		}
		return result;
	}
	
	
	
}
