package com.onway.web.controller.wechat.auth;

import java.text.MessageFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.onway.common.lang.HttpUtils;
import com.onway.common.lang.StringUtils;
import com.onway.core.service.localcache.enums.SysConfigCacheKeyEnum;
import com.onway.fyapp.common.dal.daointerface.SysConfigDAO;
import com.onway.utils.TicketInfo;
import com.onway.web.controller.AbstractController;

/**
 * 
 * <p>
 * Title: JsApiConfig
 * </p>
 * <p>
 * Description: 微信JS_SDK 注入配置信息
 * </p>
 * 
 * @author yugang.ni
 * @date 2018年7月3日 下午2:44:08
 */
public class JsApiConfig extends AbstractController {

	private static final Logger logger = Logger.getLogger(JsApiConfig.class);

	@Resource
	private SysConfigDAO sysConfigDAO;

	/**
	 * 微信JS――SDK 配置信息
	 * 
	 * @param request
	 * @param modelMap
	 * @return
	 */
	@RequestMapping("jsApiConfig.do")
	@ResponseBody
	public Object testShear(final HttpServletRequest request,
			final ModelMap modelMap) {
		String appid = sysConfigCacheManager
				.getConfigValue(SysConfigCacheKeyEnum.WE_APP_PAY_APP_ID);
		String accessToken = sysConfigDAO.selectByKey(
				SysConfigCacheKeyEnum.ACCESS_TOKEN.toString()).getSysValue();

		String accessTicket = (String) request.getSession().getAttribute(
				"accessTicket");
		try {
			String tickurl = "https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token="
					+ accessToken + "&type=jsapi";
			if (StringUtils.isEmpty(accessTicket)) {
				// 获取ticket
				String resultStr = HttpUtils.executeGetMethod(tickurl);
				TicketInfo ticketInfo = JSON.parseObject(resultStr,
						TicketInfo.class);
				accessTicket = ticketInfo.getTicket();
				request.getSession().setAttribute("accessTicket", accessTicket);
			}
		} catch (Exception e) {
			logger.info(MessageFormat.format("配置信息拉取异常! err:{0}",
					new Object[] { e.getMessage() }));
		}

		// 时间戳
		Long timeStamp = new Date().getTime() / 1000;

		String url = request.getParameter("url");// 当前网页链接
		// 随机字串
		String noncestr = UUID.randomUUID().toString();
		// 签名
		String signature = getSignature(noncestr, accessTicket, url, timeStamp);

		Map<String, String> result = new HashMap<String, String>();
		result.put("appId", appid);
		result.put("timestamp", timeStamp.toString());
		result.put("nonceStr", noncestr);
		result.put("signature", signature);

		return result;
	}

	/**
	 * 生成签名
	 * 
	 * @param nonceStr
	 *            随机字串
	 * @param jsapi_ticket
	 *            票据
	 * @param url
	 * @param timestamp
	 *            时间戳
	 * @return
	 */
	public String getSignature(String nonceStr, String jsapi_ticket,
			String url, Long timestamp) {
		String template = "jsapi_ticket=%s&noncestr=%s&timestamp=%s&url=%s";
		String result = String.format(template, jsapi_ticket, nonceStr,
				timestamp, url);

		return org.apache.commons.codec.digest.DigestUtils.shaHex(result);
	}
}
