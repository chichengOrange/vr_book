/**
 * 
 */
package com.onway.core.service.impl;

import java.util.ArrayList;
import java.util.List;

import com.onway.core.service.UserQueryService;
import com.onway.fyapp.common.dal.daointerface.AccountDAO;
import com.onway.fyapp.common.dal.daointerface.AccountLogDAO;
import com.onway.fyapp.common.dal.daointerface.TeamUserDAO;
import com.onway.fyapp.common.dal.daointerface.UserDAO;
import com.onway.fyapp.common.dal.dataobject.AccountDO;
import com.onway.fyapp.common.dal.dataobject.AccountLogDO;
import com.onway.fyapp.common.dal.dataobject.TeamUserDO;
import com.onway.fyapp.common.dal.dataobject.UserDO;
import com.onway.fyapp.common.dal.dataobject.returnObj.UserTeamResult;
import com.onway.model.conver.UserConver;
import com.onway.model.enums.DelFlgEnum;
import com.onway.platform.common.base.QueryResult;
import com.onway.platform.common.service.template.AbstractServiceImpl;
import com.onway.platform.common.service.template.ServiceCheckCallback;
import com.onway.platform.common.service.util.AssertUtil;
import com.onway.web.controller.result.AccountLogResult;
import com.onway.web.controller.result.AccountResult;
import com.onway.web.controller.result.UserInfoResult;

public class UserQueryServiceImpl extends AbstractServiceImpl implements
		UserQueryService {

	private UserDAO userDAO;

	private AccountDAO accountDAO;

	private AccountLogDAO accountLogDAO;

	private TeamUserDAO teamUserDAO;

	public void setUserDAO(UserDAO userDAO) {
		this.userDAO = userDAO;
	}

	public void setAccountDAO(AccountDAO accountDAO) {
		this.accountDAO = accountDAO;
	}

	public void setAccountLogDAO(AccountLogDAO accountLogDAO) {
		this.accountLogDAO = accountLogDAO;
	}

	public void setTeamUserDAO(TeamUserDAO teamUserDAO) {
		this.teamUserDAO = teamUserDAO;
	}

	// userId openId 查询用户信息
	public QueryResult<UserDO> searchByUserIdOrOpenId(final String userId,
			final String openId) {
		final QueryResult<UserDO> result = new QueryResult<UserDO>(false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
					}

					@Override
					public void executeService() {
						UserDO userDO = userDAO.searchByUserIdOrOpenId(userId,
								openId);
						result.setSuccess(true);
						result.setResultObject(userDO);
					}
				});
		return result;
	}

	// 获取用户 个人信息
	public QueryResult<UserInfoResult> getUserAllInfo(final String userId) {
		final QueryResult<UserInfoResult> result = new QueryResult<UserInfoResult>(
				false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(userId, "用户未登录");
					}

					@Override
					public void executeService() {
						UserDO userDO = userDAO.searchByUserIdOrOpenId(userId,
								null);
						UserInfoResult userInfoResult = UserConver
								.buildUserInfo(userDO);
						result.setSuccess(true);
						result.setResultObject(userInfoResult);
					}
				});
		return result;
	}

	// 获取用户 单个信息
	public QueryResult<String> getUserSingleInfo(final String userId,
			final String type) {
		final QueryResult<String> result = new QueryResult<String>(false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(userId, "用户未登录");
						AssertUtil.notBlank(type, "信息类型为空");
					}

					@Override
					public void executeService() {
						String singleInfo = userDAO.getUserSingleInfo(userId,
								type);
						result.setSuccess(true);
						result.setResultObject(singleInfo);
					}
				});
		return result;
	}

	/**
	 * 获取用户账户信息
	 */
	public QueryResult<AccountResult> getUserAccountInfo(final String userId,
			final String type) {
		final QueryResult<AccountResult> result = new QueryResult<AccountResult>(
				false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(userId, "用户未登录");
						AssertUtil.notBlank(type, "账户类型为空");
					}

					@Override
					public void executeService() {
						AccountDO accountDO = accountDAO.queryByUserId(userId,
								type);
						AccountResult accountResult = UserConver
								.buildAccountInfo(accountDO);
						result.setSuccess(true);
						result.setResultObject(accountResult);
					}
				});
		return result;
	}

	/**
	 * 获取用户账户账户流水
	 */
	public QueryResult<List<AccountLogResult>> getUserAccountListInfo(
			final String userId, final String logType, final int startRow,
			final int pageSize) {
		final QueryResult<List<AccountLogResult>> result = new QueryResult<List<AccountLogResult>>(
				false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(userId, "用户未登录");
						AssertUtil.notBlank(logType, "流水类型为空");
					}

					@Override
					public void executeService() {
						AccountDO accountDO = accountDAO.queryByUserId(userId,
								DelFlgEnum.NOT_DEL.getCode());
						if (accountDO == null) {
							result.setSuccess(false);
							result.setMessage("你还未创建个人账户");
							return;
						}
						List<AccountLogDO> accountLog = accountLogDAO
								.searchMyAccountLog(accountDO.getAccountNo(),
										logType, DelFlgEnum.NOT_DEL.getCode(),
										startRow, pageSize);

						List<AccountLogResult> accountResult = new ArrayList<AccountLogResult>();
						for (AccountLogDO accountLogDO : accountLog) {
							AccountLogResult accountLogResult = UserConver
									.buildAccountLogList(accountLogDO);
							if (null != accountLogResult)
								accountResult.add(accountLogResult);
						}
						result.setSuccess(true);
						result.setResultObject(accountResult);
					}
				});
		return result;
	}

	/**
	 * 获取用户账户流水总数
	 */
	public int getUserAccountListInfoCount(final String userId,
			final String logType) {
		AccountDO accountDO = accountDAO.queryByUserId(userId,
				DelFlgEnum.NOT_DEL.getCode());
		if (accountDO == null) {
			return 0;
		}
		return accountLogDAO.searchMyAccountLogCount(accountDO.getAccountNo(),
				logType, DelFlgEnum.NOT_DEL.getCode());
	}

	/**
	 * 手机号查询用户信息
	 * 
	 * @return
	 */
	public QueryResult<UserDO> getUserInfo(final String cell) {
		final QueryResult<UserDO> result = new QueryResult<UserDO>(false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(cell, "手机号为空");
					}

					@Override
					public void executeService() {
						UserDO userDO = userDAO.checkCell(null, cell);
						if (null != userDO) {
							result.setSuccess(true);
							result.setResultObject(userDO);
						}
					}
				});
		return result;
	}

	/**
	 * 查询组成员
	 */
	public QueryResult<List<UserTeamResult>> getUserTeamUserInfo(
			final String userId) {
		final QueryResult<List<UserTeamResult>> result = new QueryResult<List<UserTeamResult>>(
				false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {
					@Override
					public void check() {
						AssertUtil.notBlank(userId, "用户未登录");
					}

					@Override
					public void executeService() {
						TeamUserDO myTeam = teamUserDAO.searchMyTeam(userId);
						if (null == myTeam) {
							result.setMessage("还不是组成员");
						} else {
							List<UserTeamResult> teamUserList = teamUserDAO
									.queryTeamUser(myTeam.getTeamId(),null,null);
							result.setSuccess(true);
							result.setResultObject(teamUserList);
						}
					}
				});
		return result;
	}

	/**
	 * 组成员总数量
	 */
	public int getUserTeamUserInfoCount(final String userId) {
		TeamUserDO myTeam = teamUserDAO.searchMyTeam(userId);
		if (null == myTeam) {
			return 0;
		} else {
			return teamUserDAO.queryTeamUserCount(myTeam.getTeamId());
		}
	}

	/**
	 * 团队账户流水
	 */
	public QueryResult<List<AccountLogResult>> getUserAccountTeamInfo(
			final String userId, final String logType, final int startRow,
			final int pageSize) {
		final QueryResult<List<AccountLogResult>> result = new QueryResult<List<AccountLogResult>>(
				false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(userId, "用户未登录");
						AssertUtil.notBlank(logType, "流水类型为空");
					}

					@Override
					public void executeService() {

						TeamUserDO myTeam = teamUserDAO.searchMyTeam(userId);
						if (null == myTeam) {
							result.setSuccess(false);
							result.setMessage("还不是组成员");
							return;
						}

						AccountDO accountDO = accountDAO.queryByTeamId(
								myTeam.getTeamId(),
								DelFlgEnum.NOT_DEL.getCode());
						if (accountDO == null) {
							result.setSuccess(false);
							result.setMessage("还未创建团队账户");
							return;
						}
						List<AccountLogDO> accountLog = accountLogDAO
								.searchMyAccountLog(accountDO.getAccountNo(),
										logType, DelFlgEnum.NOT_DEL.getCode(),
										startRow, pageSize);

						List<AccountLogResult> accountResult = new ArrayList<AccountLogResult>();
						for (AccountLogDO accountLogDO : accountLog) {
							AccountLogResult accountLogResult = UserConver
									.buildAccountLogList(accountLogDO);
							if (null != accountLogResult)
								accountResult.add(accountLogResult);
						}
						result.setSuccess(true);
						result.setResultObject(accountResult);
					}
				});
		return result;
	}

	/**
	 * 团队账户流水总记录数
	 */
	public int getUserAccountTeamInfoCount( final String userId, final String logType) {
		TeamUserDO myTeam = teamUserDAO.searchMyTeam(userId);
		if (null == myTeam) {
			return 0;
		}

		AccountDO accountDO = accountDAO.queryByTeamId(myTeam.getTeamId(),
				DelFlgEnum.NOT_DEL.getCode());
		if (accountDO == null) {
			return 0;
		}
		return accountLogDAO.searchMyAccountLogCount( accountDO.getAccountNo(), logType, DelFlgEnum.NOT_DEL.getCode());
	}
	
	/**
	 * 获取团队账户信息
	 */
	public QueryResult<AccountResult> getTeamAccountInfo(final String userId, final String type) {
		final QueryResult<AccountResult> result = new QueryResult<AccountResult>(
				false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(userId, "用户未登录");
						AssertUtil.notBlank(type, "账户类型为空");
					}

					@Override
					public void executeService() {
						
						TeamUserDO myTeam = teamUserDAO.searchMyTeam(userId);
						if (null == myTeam) {
							result.setSuccess(false);
							result.setMessage("还不是组成员");
							return;
						}

						AccountDO accountDO = accountDAO.queryByTeamId(
								myTeam.getTeamId(),
								DelFlgEnum.NOT_DEL.getCode());
						if (accountDO == null) {
							result.setSuccess(false);
							result.setMessage("还未创建团队账户");
							return;
						}
						
						AccountResult accountResult = UserConver
								.buildAccountInfo(accountDO);
						result.setSuccess(true);
						result.setResultObject(accountResult);
					}
				});
		return result;
	}
}
