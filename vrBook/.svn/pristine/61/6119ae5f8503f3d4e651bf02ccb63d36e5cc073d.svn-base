/**
 * 
 */
package com.onway.core.service.impl;

import java.util.ArrayList;
import java.util.List;

import com.onway.common.lang.StringUtils;
import com.onway.core.service.AddressService;
import com.onway.fyapp.common.dal.daointerface.AddressDAO;
import com.onway.fyapp.common.dal.dataobject.AddressDO;
import com.onway.model.conver.AddressConver;
import com.onway.model.enums.AddressDefaultEnum;
import com.onway.model.enums.DelFlgEnum;
import com.onway.platform.common.base.BaseResult;
import com.onway.platform.common.base.QueryResult;
import com.onway.platform.common.service.template.AbstractServiceImpl;
import com.onway.platform.common.service.template.ServiceCheckCallback;
import com.onway.platform.common.service.util.AssertUtil;
import com.onway.web.controller.result.AddressResult;


public class AddressServiceImpl extends AbstractServiceImpl implements AddressService {

	private AddressDAO addressDAO;
	
	public void setAddressDAO(AddressDAO addressDAO) {
		this.addressDAO = addressDAO;
	}

	/**
	 * 查询用户地址列表
	 * @param userId
	 * @param delFlg
	 * @param startRow
	 * @param pageSize
	 * @return
	 */
	public QueryResult<List<AddressResult>> queryAddressList( final String userId, final String delFlg, final int startRow, final int pageSize){
		final QueryResult<List<AddressResult>> result = new QueryResult<List<AddressResult>>(
				false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(userId, "用户未登录");
					}

					@Override
					public void executeService() {
						List<AddressDO> queryAddressList = addressDAO.queryAddressList(userId, delFlg, startRow, pageSize);
						List<AddressResult> activityResults = new ArrayList<AddressResult>();
						for (AddressDO addressDO : queryAddressList) {
							AddressResult addressListResult = AddressConver.buildAddressListResult(addressDO);
							if (null != addressListResult)
								activityResults.add(addressListResult);
						}
						result.setSuccess(true);
						result.setResultObject(activityResults);
					}
				});
		return result;
	}
	
	/**
	 * 地址数量
	 * @param userId
	 * @param delFlg
	 * @return
	 */
	public int queryAddressListCount( final String userId, final String delFlg){
		
		return addressDAO.queryAddressListCount(userId, delFlg);
	}
	
	
	/**
	 * 新增地址信息
	 * @param addressDO
	 * @return
	 */
	public BaseResult newAddress( final AddressDO addressDO){
		
		final BaseResult result = new BaseResult(false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(addressDO.getUserId(), "用户未登录");
						AssertUtil.notBlank(addressDO.getReUserName(), "收货人姓名为空");
						AssertUtil.notBlank(addressDO.getCell(), "收货人手机号为空");
						AssertUtil.notBlank(addressDO.getProvince(), "收货人省为空");
						AssertUtil.notBlank(addressDO.getCity(), "收货人市为空");
						AssertUtil.notBlank(addressDO.getArea(), "收货人区为空");
						AssertUtil.notBlank(addressDO.getReAddr(), "收货人详细地址为空");
					}

					@Override
					public void executeService() {
						//如果修改成默认
						if(StringUtils.equals(addressDO.getIsDefalt(), AddressDefaultEnum.DEFAULT_YES.getCode())){
							//将该用户其他设置为非默认
							addressDAO.cancleAllDefault(AddressDefaultEnum.DEFAULT_NO.getCode(), addressDO.getUserId());
						}
						if(StringUtils.isBlank(addressDO.getIsDefalt()))
							addressDO.setIsDefalt(AddressDefaultEnum.DEFAULT_NO.getCode());
						addressDO.setDelFlg(DelFlgEnum.NOT_DEL.getCode());
						int newAddress = addressDAO.newAddress(addressDO);
						result.setSuccess(newAddress > 0 ? true : false);
					}
				});
		return result;
	}
	
	
	/**
	 * 查询地址详情
	 * @param userId
	 * @param addressId
	 * @return
	 */
	public QueryResult<AddressResult> getAddressDetails( final String userId, final String addressId){
		
		final QueryResult<AddressResult> result = new QueryResult<AddressResult>(false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(userId, "用户未登录");
						AssertUtil.notBlank(addressId, "地址编号为空");
					}

					@Override
					public void executeService() {
						AddressDO addressDO = addressDAO.getAddressDetails(Integer.valueOf(addressId), userId);
						AddressResult addressResult = AddressConver.buildAddressDetailsResult(addressDO);
						result.setSuccess(true);
						result.setResultObject(addressResult);
					}
				});
		return result;
	}
	
	
	/**
	 * 修改地址信息
	 * @param addressDO
	 * @return
	 */
	public BaseResult updateAddressMsg( final AddressDO addressDO){
		
		final BaseResult result = new BaseResult(false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(addressDO.getUserId(), "用户未登录");
						AssertUtil.notBlank(addressDO.getReUserName(), "收货人姓名为空");
						AssertUtil.notBlank(addressDO.getCell(), "收货人手机号为空");
						AssertUtil.notBlank(addressDO.getProvince(), "收货人省为空");
						AssertUtil.notBlank(addressDO.getCity(), "收货人市为空");
						AssertUtil.notBlank(addressDO.getArea(), "收货人区为空");
						AssertUtil.notBlank(addressDO.getReAddr(), "收货人详细地址为空");
					}

					@Override
					public void executeService() {
						//如果修改成默认
						if(StringUtils.equals(addressDO.getIsDefalt(), AddressDefaultEnum.DEFAULT_YES.getCode())){
							//将该用户其他设置为非默认
							addressDAO.cancleAllDefault(AddressDefaultEnum.DEFAULT_NO.getCode(), addressDO.getUserId());
						}
						if(StringUtils.isBlank(addressDO.getIsDefalt()))
							addressDO.setIsDefalt(AddressDefaultEnum.DEFAULT_NO.getCode());
						addressDO.setDelFlg(DelFlgEnum.NOT_DEL.getCode());
						int newAddress = addressDAO.updateAddressMsg(addressDO);
						result.setSuccess(newAddress > 0 ? true : false);
					}
				});
		return result;
	}
	
	/**
	 * 删除地址信息
	 * @param addressDO
	 * @return
	 */
	public BaseResult delAddressMsg( final String delFlg, final String userId, final String addressId){
		
		final BaseResult result = new BaseResult(false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(userId, "用户未登录");
						AssertUtil.notBlank(addressId, "地址编号为空");
						AssertUtil.notBlank(delFlg, "删除状态为空");
					}

					@Override
					public void executeService() {
						int delAddressMsg = addressDAO.delAddressMsg(delFlg, userId, Integer.valueOf(addressId));
						result.setSuccess(delAddressMsg > 0 ? true : false);
					}
				});
		return result;
	}
	
	
	/**
	 * 设置或者取消 默认地址信息
	 * @param addressDO
	 * @return
	 */
	public BaseResult setDefaultAddress( final String isDefault, final String userId, final String addressId){
		
		final BaseResult result = new BaseResult(false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(userId, "用户未登录");
						AssertUtil.notBlank(addressId, "地址编号为空");
						AssertUtil.notBlank(isDefault, "默认状态为空");
					}

					@Override
					public void executeService() {
						if(StringUtils.equals(isDefault, AddressDefaultEnum.DEFAULT_YES.getCode())){
							//将该用户其他设置为非默认
							addressDAO.cancleAllDefault(AddressDefaultEnum.DEFAULT_NO.getCode(), userId);
						}
						
						int setDefaultAddress = addressDAO.setDefaultAddress(isDefault, userId, Integer.valueOf(addressId));
						result.setSuccess(setDefaultAddress > 0 ? true : false);
					}
				});
		return result;
	}
	
	/**
	 * 将用户所有地址改为非默认
	 * @param addressDO
	 * @return
	 */
	public BaseResult cancleAllDefault( final String isDefault, final String userId){
		
		final BaseResult result = new BaseResult(false);
		serviceTemplate.executeWithoutTransaction(result,
				new ServiceCheckCallback() {

					@Override
					public void check() {
						AssertUtil.notBlank(userId, "用户未登录");
						AssertUtil.notBlank(isDefault, "默认状态为空");
					}

					@Override
					public void executeService() {
						int cancleAllDefault = addressDAO.cancleAllDefault(isDefault, userId);
						result.setSuccess(cancleAllDefault > 0 ? true : false);
					}
				});
		return result;
	}
}
