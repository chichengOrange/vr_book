/**
 * onway.com Inc.
 * Copyright (c) 2016-2016 All Rights Reserved.
 */
package com.onway.web.controller.wechat.auth;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.text.MessageFormat;
import java.util.Arrays;

import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.alibaba.fastjson.JSON;
import com.onway.common.lang.HttpUtils;
import com.onway.common.lang.StringUtils;
import com.onway.core.service.localcache.enums.SysConfigCacheKeyEnum;
import com.onway.fyapp.common.dal.dataobject.UserDO;
import com.onway.platform.common.base.BaseResult;
import com.onway.platform.common.base.QueryResult;
import com.onway.utils.ParamsUtil;
import com.onway.utils.SHA1;
import com.onway.utils.UserInfo;
import com.onway.web.controller.AbstractController;

/**
 * 核心处理请求类（所有用户的一些请求事件都转发到这里）
 * 
 * @author wenqiang.Wang
 * @version $Id: WechatCallbackApi.java, v 0.1 2016年10月27日 下午2:12:34
 *          wenqiang.Wang Exp $
 */
@Controller
public class WechatCallbackApi extends AbstractController {
	/** logger */
	private static final Logger logger = Logger
			.getLogger(WechatCallbackApi.class);

	// 自定义 token
	private String TOKEN = "9928328eb8aa3";

	// @RequestMapping("/wechat.do")
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		boolean checkSignature = authToken(request, response);
		if (checkSignature) {
			doPost(request, response);
		}
	}

	@RequestMapping("/wechat.do")
	private void doPost(HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// response.getWriter().print("");
		// 认证token
		// authToken(request,response);
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		PrintWriter out = response.getWriter();
		try {
			BufferedReader br;
			// 【1】读取xml数据
			br = new BufferedReader(new InputStreamReader(
					(ServletInputStream) request.getInputStream()));
			String line = null;
			StringBuilder sb = new StringBuilder();
			while ((line = br.readLine()) != null) {
				sb.append(line);
			}
			logger.info(MessageFormat.format("扫描事件信息! sb.toString:{0}",
					new Object[] { sb.toString() }));
			ParamsUtil paramsUtil = new ParamsUtil();
			String fromUserN = paramsUtil.getValue("FromUserName",
					sb.toString());
			String eventInfo = paramsUtil.getValue("Event", sb.toString());
			String eventK = paramsUtil.getValue("EventKey", sb.toString());
			String toUserN = paramsUtil.getValue("ToUserName", sb.toString());
			String fromUserName = StringUtils.substringBetween(fromUserN,
					"<![CDATA[", "]]>");
			String eventKey = StringUtils.substringBetween(eventK, "<![CDATA[",
					"]]>");
			String event = StringUtils.substringBetween(eventInfo, "<![CDATA[",
					"]]>");

			if (StringUtils.contains(eventKey, "last_trade_no_")) {
				eventKey = "";
			}

			if (StringUtils.contains(eventKey, "_")) {
				eventKey = eventKey.substring(eventKey.indexOf("_") + 1);
			}

			logger.info(MessageFormat.format(
					"扫描事件信息! fromUserName:{0}, echostr:{1}", new Object[] {
							fromUserName, eventKey }));

			String accessToken = sysConfigCacheManager
					.getConfigValue(SysConfigCacheKeyEnum.ACCESS_TOKEN);

			logger.info(MessageFormat.format("扫描事件信息! accessToken:{0}",
					new Object[] { accessToken }));
			response.getWriter().print("");

			String getInfoUrl = "https://api.weixin.qq.com/cgi-bin/user/info?access_token="
					+ accessToken + "&openid=" + fromUserName + "&lang=zh_CN";
			String resultStr = HttpUtils.executeGetMethod(getInfoUrl, "UTF-8",
					null);
			UserInfo userInfo = JSON.parseObject(resultStr, UserInfo.class);
			logger.info("---------获取的userInfo为--------" + userInfo);

			// 根据openID查询用户是否存在
			QueryResult<UserDO> baseResult = userQueryService
					.searchByUserIdOrOpenId(null, userInfo.getOpenid());
			if (baseResult.isSuccess()) {
				UserDO userDO = baseResult.getResultObject();
				if (null == userDO) {
					// 关注
					if ("subscribe".equals(event)) {
						// eventKey 为空 顶级
						if (StringUtils.isEmpty(eventKey)) {
							BaseResult newUser = userOperationService
									.newUser(userInfo);
							if (newUser.isSuccess()) {
								QueryResult<UserDO> queryUser = userQueryService
										.searchByUserIdOrOpenId(null,
												userInfo.getOpenid());
								if (queryUser.isSuccess()
										&& null != queryUser.getResultObject()) {
									//新增账户
									userOperationService.newUserAccount(queryUser.getResultObject().getUserId());
									request.getSession().setAttribute("userId",queryUser.getResultObject().getUserId());
									response.setContentType("text/html;charset=utf-8");
									String backStr = "<xml>"
											+ "<ToUserName>"
											+ fromUserN
											+ "</ToUserName>"
											+ "<FromUserName>"
											+ toUserN
											+ "</FromUserName>"
											+ "<CreateTime>"
											+ Long.toString(System
													.currentTimeMillis() / 1000)
											+ "</CreateTime>"
											+ "<MsgType><![CDATA[text]]></MsgType>"
											+ "<Content><![CDATA[您好，欢迎关注胡庆余堂！]]></Content>"
											+ "</xml>";
									response.getWriter().print(backStr);
								}
							}
						}
					}
				} else {
					request.getSession().setAttribute("userId",
							userDO.getUserId());
					response.setContentType("text/html;charset=utf-8");
					String backStr = "<xml>" + "<ToUserName>" + fromUserN
							+ "</ToUserName>" + "<FromUserName>" + toUserN
							+ "</FromUserName>" + "<CreateTime>"
							+ Long.toString(System.currentTimeMillis() / 1000)
							+ "</CreateTime>"
							+ "<MsgType><![CDATA[text]]></MsgType>"
							+ "<Content><![CDATA[欢迎您再次回来！]]></Content>"
							+ "</xml>";
					response.getWriter().print(backStr);
				}
				// 取消关注
				if ("unsubscribe".equals(event)) {

				}
			}
		} finally {
			out.close();
		}
	}

	private boolean authToken(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// 微信加密签名
		String signature = request.getParameter("signature");
		// 随机字符串
		String echostr = request.getParameter("echostr");
		// 时间戳
		String timestamp = request.getParameter("timestamp");
		// 随机数
		String nonce = request.getParameter("nonce");

		logger.info(MessageFormat.format(
				"验证信息! signature:{0}, echostr:{1},timestamp:{2},nonce:{3}",
				new Object[] { signature, echostr, timestamp, nonce }));
		String[] str = { TOKEN, timestamp, nonce };
		Arrays.sort(str); // 字典序排序
		String bigStr = str[0] + str[1] + str[2];
		// SHA1加密
		String digest = new SHA1().getDigestOfString(bigStr.getBytes())
				.toLowerCase();

		logger.info(MessageFormat.format("验证信息! signature:{0}, digest:{1}",
				new Object[] { signature, digest }));
		// 确认请求来至微信
		if (digest.equals(signature)) {
			response.getWriter().print(echostr);
			return true;
		}
		return false;
	}
}