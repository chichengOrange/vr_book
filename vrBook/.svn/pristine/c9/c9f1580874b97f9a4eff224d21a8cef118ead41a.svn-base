/**
 * onway.com Inc.
 * Copyright (c) 2013-2013 All Rights Reserved.
 */
package com.onway.web.controller.mine;

import java.text.MessageFormat;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.onway.common.lang.StringUtils;
import com.onway.fyapp.common.dal.dataobject.AddressDO;
import com.onway.model.enums.DelFlgEnum;
import com.onway.platform.common.base.BaseResult;
import com.onway.platform.common.base.QueryResult;
import com.onway.platform.common.exception.BaseRuntimeException;
import com.onway.platform.common.utils.LogUtil;
import com.onway.web.controller.AbstractController;
import com.onway.web.controller.result.AddressResult;
import com.onway.web.controller.result.JsonPageResult;
import com.onway.web.controller.result.JsonQueryResult;
import com.onway.web.controller.result.JsonResult;

/**
 * 
* <p>Title: AddressController</p>  
* <p>Description: 地址控制类</p>  
* @author yugang.ni  
* @date 2018年6月29日  下午5:02:56
 */
@Controller
public class AddressController extends AbstractController {
	
	private static final Logger log = Logger.getLogger(AddressController.class);

	/**
	 * 地址列表查询
	 * @param request
	 * @return
	 */
	@RequestMapping("/addressQuery.do")
	@ResponseBody
	public Object addressQuery(HttpServletRequest request){
		
		String userId = "";
		String delFlg = "";
		
		int pageSize = adjustPageSize(request);
		int pageNum = adjustPageNo(request);
		
		JsonPageResult<AddressResult> jsonPageResult = new JsonPageResult<AddressResult>(
				false);
		try {
			userId = request.getParameter("userId");
			delFlg = DelFlgEnum.NOT_DEL.getCode();
			

			Integer startRow = (pageNum - 1) * pageSize;
			
			QueryResult<List<AddressResult>> queryAddressList = addressService.queryAddressList(userId, delFlg, startRow, pageSize);
			
			int count = addressService.queryAddressListCount(userId, delFlg);

			// 【2】分页判断
			jsonPageResult.setNext(count > pageSize * pageNum ? true : false);
			jsonPageResult.setTotalPages(calculatePage(count, pageSize));
			jsonPageResult.setListObject(queryAddressList.getResultObject());
			jsonPageResult.setPageNum(pageNum);
			jsonPageResult.setBizSucc(queryAddressList.isSuccess());
			jsonPageResult.setErrMsg(queryAddressList.getMessage());

		} catch (BaseRuntimeException e) {
			LogUtil.error(log, MessageFormat.format(
					"地址列表查询失败，userId:{0},message:{1}", new Object[] {
							userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		} catch (Exception e) {
			LogUtil.error(log, MessageFormat.format(
					"地址列表查询异常！userId:{0},message:{1}", new Object[] {
							userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		}
		return jsonPageResult;
	}
	
	/**
	 * 地址详情
	 * @param request
	 * @return
	 */
	@RequestMapping("/addressDetailsQuery.do")
	@ResponseBody
	public Object addressDetailsQuery(HttpServletRequest request){
		
		String addressId = "";
		String userId = "";
		
		JsonQueryResult<AddressResult> result = new JsonQueryResult<AddressResult>(
				false);
		try {
			addressId = request.getParameter("addressId");
			userId = request.getParameter("userId");
			
			QueryResult<AddressResult> addressDetails = addressService.getAddressDetails(userId, addressId);
			
			result.setBizSucc(addressDetails.isSuccess());
			result.setErrMsg(addressDetails.getMessage());
			result.setObj(addressDetails.getResultObject());

		} catch (BaseRuntimeException e) {
			LogUtil.error(log, MessageFormat.format(
					"消息详情查询失败，addressId:{0},message:{1}", new Object[] {
							addressId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		} catch (Exception e) {
			LogUtil.error(log, MessageFormat.format(
					"消息详情查询异常！addressId:{0},message:{1}", new Object[] {
							addressId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		}
		return result;
	}

	
	/**
	 * 地址信息修改/创建
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/updateUserAddress.do")
	@ResponseBody
	public Object updateUserAddress(HttpServletRequest request) {
		
		String userId = "";
		String addressId = "";
		String isDefalt = "";
		String reUserName = "";
		String cell = "";
		String province = "";
		String city = "";
		String area = "";
		String reAddr = "";
		
		String type = "";//1修改  0新增

		JsonResult result = new JsonResult(false);
		try {
			userId = request.getParameter("userId");
			addressId = request.getParameter("addressId");
			isDefalt = request.getParameter("isDefalt");
			reUserName = request.getParameter("reUserName");
			cell = request.getParameter("cell");
			province = request.getParameter("province");
			city = request.getParameter("city");
			area = request.getParameter("area");
			reAddr = request.getParameter("reAddr");
			
			type = request.getParameter("type");
			
			AddressDO addressDO = new AddressDO();
			addressDO.setUserId(userId);
			addressDO.setIsDefalt(isDefalt);
			addressDO.setReUserName(reUserName);
			addressDO.setCell(cell);
			addressDO.setProvince(province);
			addressDO.setCity(city);
			addressDO.setArea(area);
			addressDO.setReAddr(reAddr);
			
			if(StringUtils.equals(type, "1"))
				addressDO.setId(Integer.valueOf(addressId.trim()));
			
			BaseResult baseResult = new BaseResult(false);
			
			if (StringUtils.equals(type, "0")) {
				baseResult = addressService.newAddress(addressDO);
			}
			if (StringUtils.equals(type, "1")) {
				baseResult = addressService.updateAddressMsg(addressDO);
			}
			
			result.setBizSucc(baseResult.isSuccess());
			result.setErrMsg(baseResult.getMessage());

		} catch (BaseRuntimeException e) {
			LogUtil.error(log, MessageFormat.format(
					"地址信息修改/创建失败，userId{0},type{1},message:{2}", new Object[] {
							userId, type, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		} catch (Exception e) {
			LogUtil.error(log, MessageFormat.format(
					"地址信息修改/创建异常！userId{0},type{1},message:{2}", new Object[] {
							userId, type, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		}
		return result;
	}
	
	/**
	 * 删除地址信息
	 * @param request
	 * @return
	 */
	@RequestMapping("/delAddressMsg.do")
	@ResponseBody
	public Object delAddressMsg(HttpServletRequest request) {
		
		String delFlg = "";
		String userId = "";
		String addressId = "";

		JsonResult result = new JsonResult(false);
		try {
			delFlg = DelFlgEnum.HAS_DEL.getCode();
			userId = request.getParameter("userId");
			addressId = request.getParameter("addressId");
			
			BaseResult baseResult  = addressService.delAddressMsg(delFlg, userId, addressId);
			
			result.setBizSucc(baseResult.isSuccess());
			result.setErrMsg(baseResult.getMessage());

		} catch (BaseRuntimeException e) {
			LogUtil.error(log, MessageFormat.format(
					"删除地址信息失败，userId{0},message:{1}", new Object[] {
							userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		} catch (Exception e) {
			LogUtil.error(log, MessageFormat.format(
					"删除地址信息异常！userId{0},message:{1}", new Object[] {
							userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		}
		return result;
	}
	
	/**
	 * 设置地址默认 或取消 默认
	 * @param request
	 * @return
	 */
	@RequestMapping("/setDefaultAddress.do")
	@ResponseBody
	public Object setDefaultAddress(HttpServletRequest request) {
		
		String isDefault = "";// 1 默认  0不默认
		String userId = "";
		String addressId = "";

		JsonResult result = new JsonResult(false);
		try {
			isDefault = request.getParameter("isDefault");
			userId = request.getParameter("userId");
			addressId = request.getParameter("addressId");
			
			BaseResult baseResult  = addressService.setDefaultAddress(isDefault, userId, addressId);
			
			result.setBizSucc(baseResult.isSuccess());
			result.setErrMsg(baseResult.getMessage());

		} catch (BaseRuntimeException e) {
			LogUtil.error(log, MessageFormat.format(
					"删除地址信息失败，userId{0},message:{1}", new Object[] {
							userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		} catch (Exception e) {
			LogUtil.error(log, MessageFormat.format(
					"删除地址信息异常！userId{0},message:{1}", new Object[] {
							userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		}
		return result;
	}
}
