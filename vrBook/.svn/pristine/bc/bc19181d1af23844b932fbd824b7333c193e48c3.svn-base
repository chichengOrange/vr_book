package com.onway.core.service.impl;

import java.text.MessageFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.apache.log4j.Logger;

import com.alibaba.fastjson.JSON;
import com.onway.common.lang.HttpUtils;
import com.onway.common.lang.StringUtils;
import com.onway.core.service.SmsComponent;
import com.onway.fyapp.common.dal.daointerface.SmDAO;
import com.onway.fyapp.common.dal.dataobject.SmDO;
import com.onway.platform.common.base.BaseResult;
import com.onway.platform.common.exception.BaseRuntimeException;
import com.onway.platform.common.helper.SystemHelper;
import com.onway.platform.common.service.template.AbstractServiceImpl;
import com.onway.utils.SmsResult;

public class SmsComponentImpl extends AbstractServiceImpl implements
		SmsComponent {

	public static final String APIKEY = "fccac1c2e85de";
	public static final String APIACCOUNT = "100817121200010087";
	public static final String URL = "http://www.xcapi.net:18018/xcapi/smsApiSend.do";

	private SmDAO smDAO;

	public void setSmDAO(SmDAO smDAO) {
		this.smDAO = smDAO;
	}

	private static final Logger logger = Logger
			.getLogger(SmsComponentImpl.class);

	@Override
	public BaseResult verifyCode(String cell, String checkCode) {
		BaseResult result = new BaseResult(true);

		SmDO smsDO = smDAO.getLatest(cell);
		// 1.1
		if (StringUtils.isBlank(checkCode)) {
			result.setSuccess(false);
			result.setMessage("请输入验证码");
			return result;
		}
		// 1.2没有发送过验证码
		if (null == smsDO) {
			result.setSuccess(false);
			result.setMessage("未发送过验证码,或发送验证码失败");
			return result;
		}
		// 1.3验证码时效性
		if (new Date().getTime() - smsDO.getGmtCreate().getTime() >= 300000) { // 5分钟
			result.setSuccess(false);
			result.setMessage("验证码失效");
			return result;
		}

		// 1.4验证码比对
		if (!checkCode.equals(smsDO.getVerifyCode())) {
			result.setSuccess(false);
			result.setMessage("验证码错误");
			return result;
		}
		return result;
	}

	@Override
	public BaseResult sendVerifyCode(String cell) {
		BaseResult result = new BaseResult(true);

		if (!SystemHelper.isProd()) {
			SmDO smDO = new SmDO();
			smDO.setCell(cell);
			smDO.setVerifyCode("000000");
			smDO.setMemo("测试环境");
			smDO.setSmsStatus("SUCC");
			smDAO.insert(smDO);
			return result;
		}

		String content = "";
		try {
			// 发送时间间隔判断
			SmDO info = smDAO.getLatest(cell);
			if (info != null) {
				if (new Date().getTime() - info.getGmtCreate().getTime() <= 60000) { // 1分钟
					result.setSuccess(false);
					result.setMessage("发送频率过快！");
					return result;
				}
			}
			// 发送内容
			String verifyCode = getVerifyCode(6);
			content = "尊敬的用户您好，您的短信验证码为：" + verifyCode + "（五分钟有效）";
			Map<String, String> paramsMap = new HashMap<String, String>();
			paramsMap.put("apiKey", APIKEY);
			paramsMap.put("apiAccount", APIACCOUNT);
			paramsMap.put("cell", cell);
			paramsMap.put("content", content);
			paramsMap.put("style", "FRONT");
			logger.error("发送内容：" + paramsMap.toString());

			// 返回发送结果
			String returnStr = HttpUtils.executePostMethod(URL, "UTF-8",
					paramsMap);
			logger.error(MessageFormat.format("短信发送结果 cell:{1}, returnStr:{2}",
					new Object[] { cell, returnStr }));

			SmDO smDO = new SmDO();
			smDO.setCell(cell);
			smDO.setVerifyCode(verifyCode);
			smDO.setMemo(returnStr);

			if (StringUtils.isBlank(returnStr)) {
				throw new BaseRuntimeException("返回结果为空");
			}

			SmsResult smsResult = JSON.parseObject(StringUtils.trim(returnStr),
					SmsResult.class);
			String smsStatus = null;
			if (smsResult.getCode().equals("SUCCESS")) {
				smsStatus = "SUCC";
			} else {
				smsStatus = "FAIL";
				result.setSuccess(false);
				result.setMessage(" 发送验证码失败，请稍后再试 ");
			}
			smDO.setSmsStatus(smsStatus);
			smDAO.insert(smDO);
		} catch (Exception e) {
			logger.error(MessageFormat.format(
					"短信发送失败,{0},导流信息通道 phone:{1},content:{2}",
					new Object[] { e.getMessage(), cell, content }));
		}
		return result;
	}

	public String getVerifyCode(int length) {
		if (length < 1 || length > 10) {
			return "";
		}
		StringBuffer sb = new StringBuffer();
		for (int i = 1; i <= length; i++) {
			int rand = new Random().nextInt(10);
			sb.append(rand);
		}
		return sb.toString();
	}

}
