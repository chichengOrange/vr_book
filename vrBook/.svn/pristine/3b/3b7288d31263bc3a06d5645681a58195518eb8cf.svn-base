package com.onway.core.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.onway.core.service.ProductService;
import com.onway.fyapp.common.dal.daointerface.CartDAO;
import com.onway.fyapp.common.dal.daointerface.ImgDAO;
import com.onway.fyapp.common.dal.daointerface.ProductDAO;
import com.onway.fyapp.common.dal.dataobject.ImgDO;
import com.onway.fyapp.common.dal.dataobject.ProductDO;
import com.onway.fyapp.common.dal.dataobject.returnObj.ProductInfo;
import com.onway.model.enums.CartStatusEnum;
import com.onway.model.enums.DelFlgEnum;
import com.onway.model.enums.ImgTypeEnum;
import com.onway.platform.common.base.BaseResult;
import com.onway.platform.common.base.QueryResult;
import com.onway.platform.common.service.template.AbstractServiceImpl;
import com.onway.platform.common.service.template.ServiceCheckCallback;
import com.onway.platform.common.service.util.AssertUtil;

public class ProductServiceImpl extends AbstractServiceImpl implements ProductService{

	@Resource
	private CartDAO cartDAO;
	
	@Resource
	private ProductDAO productDAO;
	
	@Resource
	private ImgDAO imgDAO;
	@Override
	public QueryResult<List<ProductInfo>> guessLike(final String userId, final int offset,
			final int limit) {
		// TODO Auto-generated method stub
		final QueryResult<List<ProductInfo>> result = new QueryResult<List<ProductInfo>>(true);
		serviceTemplate.execute(result, new ServiceCheckCallback() {
			
			@Override
			public void check() {
				// TODO Auto-generated method stub
				AssertUtil.notBlank(userId, "用户ID不能为空");
			}
			
			@Override
			public void executeService() {
				// TODO Auto-generated method stub
				//获得用户购物车中所有商品的分类
				List<Map<String, Object>> carts = cartDAO.queryCart(userId, null);
				//商品分类
				List<String> fatherCates = new ArrayList<String>();
				//功效分类
				List<String> fatherEfectCates = new ArrayList<String>();
				for (Map<String, Object> map : carts) {
					fatherCates.add(getMapValue(map, "fatherCate"));
					fatherEfectCates.add(getMapValue(map, "fatherEfectCate"));
				}
				//根据商品分类查询商品
				List<ProductDO> productList = productDAO.queryProductByCate(fatherCates, fatherEfectCates, offset, limit);
				List<ProductInfo> products = new ArrayList<ProductInfo>();
				//查询商品列表图片
				for (ProductDO productDO : productList) {
					ProductInfo info = new ProductInfo();
					info.setProductId(productDO.getProductId());
					info.setProductName(productDO.getProductName());
					info.setProductPrice(productDO.getProductPrice().getAmount().toString());
					info.setOldPrice(productDO.getOldPrice().getAmount().toString());
					info.setStock(productDO.getStock());
					info.setSales(productDO.getSales());
					info.setBrand(productDO.getBrand());
					info.setManufacturer(productDO.getManufacturer());
					info.setLicenseNo(productDO.getLicenseNo());
					info.setType(productDO.getType());
					info.setFatherCate(productDO.getFatherCate());
					info.setChildCate(productDO.getChildCate());
					info.setFatherEfectCate(productDO.getFatherEfectCate());
					info.setChildEfectCate(productDO.getChildEfectCate());
					info.setDelFlg(productDO.getDelFlg());
					info.setCreateTime(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(productDO.getGmtCreate()));
					//查询列表图片
					ImgDO imgDO = imgDAO.queryImgByProductIdAndType(productDO.getProductId(), ImgTypeEnum.LIST_IMG.getCode(), 
							DelFlgEnum.NOT_DEL.getCode());
					info.setImgList(imgDO.getImgUrl());
					products.add(info);
				}
				result.setResultObject(products);
			}
			
			
		});
		return result;
	}

	public String getMapValue(Map<String, Object> map, String key){
		String resultStr = map.get(key) == null ? "" :  map.get(key)+"";
		return resultStr;
	}

	@Override
	public int guessLikeCount(final String userId) {
		// TODO Auto-generated method stub

		int count = 0;

		//获得用户购物车中所有商品的分类
		List<Map<String, Object>> carts = cartDAO.queryCart(userId, null);
		//商品分类
		List<String> fatherCates = new ArrayList<String>();
		//功效分类
		List<String> fatherEfectCates = new ArrayList<String>();
		for (Map<String, Object> map : carts) {
			fatherCates.add(getMapValue(map, "fatherCate"));
			fatherEfectCates.add(getMapValue(map, "fatherEfectCate"));
		}
	    count  = productDAO.queryProductCountByCate(fatherCates, fatherEfectCates);
		return count;
	}
}
