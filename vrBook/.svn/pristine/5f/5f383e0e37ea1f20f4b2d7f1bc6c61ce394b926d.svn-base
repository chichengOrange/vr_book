package com.onway.web.controller.mine;

import java.text.MessageFormat;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.onway.core.service.localcache.enums.SysConfigCacheKeyEnum;
import com.onway.fyapp.common.dal.dataobject.returnObj.UserTeamResult;
import com.onway.model.enums.DelFlgEnum;
import com.onway.model.enums.SysMsgEnum;
import com.onway.platform.common.base.BaseResult;
import com.onway.platform.common.base.QueryResult;
import com.onway.platform.common.exception.BaseRuntimeException;
import com.onway.platform.common.utils.LogUtil;
import com.onway.web.controller.AbstractController;
import com.onway.web.controller.result.AccountLogPageResult;
import com.onway.web.controller.result.AccountLogResult;
import com.onway.web.controller.result.AccountLogTeamPageResult;
import com.onway.web.controller.result.AccountResult;
import com.onway.web.controller.result.JsonResult;
import com.onway.web.controller.result.WithdrawRateResult;
import com.onway.web.controller.result.WithdrawResult;

/**
 * 
 * @author lishuaikai
 * @Description 用户信息控制类
 * @data 2018年6月28日 下午12:03:44
 */
@Controller
public class UserAccountController extends AbstractController {

	private static final Logger log = Logger
			.getLogger(UserAccountController.class);

	/**
	 * 我的账户
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/accountLogList.do")
	@ResponseBody
	public Object accountLogList(HttpServletRequest request) {

		String userId = "";
		String logType = "";

		int pageSize = adjustPageSize(request);
		int pageNum = adjustPageNo(request);

		AccountLogPageResult<AccountLogResult> jsonPageResult = new AccountLogPageResult<AccountLogResult>(
				false);
		try {
			userId = request.getParameter("userId");
			logType = request.getParameter("logType");

			Integer startRow = (pageNum - 1) * pageSize;

			QueryResult<List<AccountLogResult>> userAccountListInfo = userQueryService
					.getUserAccountListInfo(userId, logType, startRow, pageSize);

			int count = userQueryService.getUserAccountListInfoCount(userId,
					logType);

			QueryResult<AccountResult> userAccountInfo = userQueryService
					.getUserAccountInfo(userId, DelFlgEnum.NOT_DEL.getCode());

			// 【2】分页判断
			jsonPageResult.setNext(count > pageSize * pageNum ? true : false);
			jsonPageResult.setTotalPages(calculatePage(count, pageSize));
			jsonPageResult.setListObject(userAccountListInfo.getResultObject());
			jsonPageResult.setAccountResult(userAccountInfo.getResultObject());
			jsonPageResult.setPageNum(pageNum);
			jsonPageResult.setBizSucc(userAccountListInfo.isSuccess());
			jsonPageResult.setErrMsg(userAccountListInfo.getMessage());

		} catch (BaseRuntimeException e) {
			LogUtil.error(log, MessageFormat.format(
					"我的账户查询失败，userId:{0},message:{1}",
					new Object[] { userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		} catch (Exception e) {
			LogUtil.error(log, MessageFormat.format(
					"我的账户查询异常！userId:{0},message:{1}",
					new Object[] { userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		}
		return jsonPageResult;
	}
	
	/**
	 * 团队账户
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/accountLogTeam.do")
	@ResponseBody
	public Object accountLogTeam(HttpServletRequest request) {

		String userId = "";
		String logType = "";

		int pageSize = adjustPageSize(request);
		int pageNum = adjustPageNo(request);

		AccountLogTeamPageResult<AccountLogResult> jsonPageResult = new AccountLogTeamPageResult<AccountLogResult>(
				false);
		try {
			userId = request.getParameter("userId");
			logType = request.getParameter("logType");

			Integer startRow = (pageNum - 1) * pageSize;

			//流水记录
			QueryResult<List<AccountLogResult>> userAccountListInfo = userQueryService
					.getUserAccountTeamInfo(userId, logType, startRow, pageSize);

			int count = userQueryService.getUserAccountTeamInfoCount(userId,
					logType);
			
			//团队成员
			QueryResult<List<UserTeamResult>> userTeamUserInfo = userQueryService.getUserTeamUserInfo(userId);
			
			//团队账户
			QueryResult<AccountResult> teamAccountInfo = userQueryService.getTeamAccountInfo(userId, DelFlgEnum.NOT_DEL.getCode());
			
			// 【2】分页判断 针对流水
			jsonPageResult.setNext(count > pageSize * pageNum ? true : false);
			jsonPageResult.setTotalPages(calculatePage(count, pageSize));
			jsonPageResult.setListObject(userAccountListInfo.getResultObject());
			jsonPageResult.setAccountResult(teamAccountInfo.getResultObject());
			jsonPageResult.setUserTeamList(userTeamUserInfo.getResultObject());
			jsonPageResult.setPageNum(pageNum);
			jsonPageResult.setBizSucc(userAccountListInfo.isSuccess());
			jsonPageResult.setErrMsg(userAccountListInfo.getMessage());

		} catch (BaseRuntimeException e) {
			LogUtil.error(log, MessageFormat.format(
					"团队账户查询失败，userId:{0},message:{1}",
					new Object[] { userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		} catch (Exception e) {
			LogUtil.error(log, MessageFormat.format(
					"团队账户查询异常！userId:{0},message:{1}",
					new Object[] { userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		}
		return jsonPageResult;
	}
	
	/**
	 * 提现 记录 
	 * @param request
	 * @return
	 */
	@RequestMapping("/withdrawLogList.do")
	@ResponseBody
	public Object withdrawLogList(HttpServletRequest request) {

		String userId = "";

		int pageSize = adjustPageSize(request);
		int pageNum = adjustPageNo(request);

		AccountLogPageResult<WithdrawResult> jsonPageResult = new AccountLogPageResult<WithdrawResult>(
				false);
		try {
			userId = request.getParameter("userId");

			Integer startRow = (pageNum - 1) * pageSize;
			
			QueryResult<List<WithdrawResult>> withdrawLogList = withdrawService.queryWithdrawLogList(userId, startRow, pageSize);

			int count = withdrawService.queryWithdrawLogListCount(userId);

			QueryResult<AccountResult> userAccountInfo = userQueryService
					.getUserAccountInfo(userId, DelFlgEnum.NOT_DEL.getCode());

			// 【2】分页判断
			jsonPageResult.setNext(count > pageSize * pageNum ? true : false);
			jsonPageResult.setTotalPages(calculatePage(count, pageSize));
			jsonPageResult.setListObject(withdrawLogList.getResultObject());
			jsonPageResult.setAccountResult(userAccountInfo.getResultObject());
			jsonPageResult.setPageNum(pageNum);
			jsonPageResult.setBizSucc(withdrawLogList.isSuccess());
			jsonPageResult.setErrMsg(withdrawLogList.getMessage());

		} catch (BaseRuntimeException e) {
			LogUtil.error(log, MessageFormat.format(
					"提现 记录查询失败，userId:{0},message:{1}",
					new Object[] { userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		} catch (Exception e) {
			LogUtil.error(log, MessageFormat.format(
					"提现 记录查询异常！userId:{0},message:{1}",
					new Object[] { userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		}
		return jsonPageResult;
	}
	
	/**
	 * 提现费率
	 * @param request
	 * @return
	 */
	@RequestMapping("/withdrawRate.do")
	@ResponseBody
	public Object withdrawRate(HttpServletRequest request) {

		WithdrawRateResult result = new WithdrawRateResult(true);
		try {
			String rate = sysConfigCacheManager.getConfigValue(SysConfigCacheKeyEnum.HU_WITHDRAW_RATE);
			result.setRate(Double.parseDouble(rate));
		} catch (BaseRuntimeException e) {
			LogUtil.error(log, MessageFormat.format(
					"提现费率查询失败，message:{0}",
					new Object[] { e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		} catch (Exception e) {
			LogUtil.error(log, MessageFormat.format(
					"提现费率查询异常！message:{0}",
					new Object[] { e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		}
		return result;
	}
	
	/**
	 * 提现申请
	 * @param request
	 * @return
	 */
	@RequestMapping("/applyWithdraw.do")
	@ResponseBody
	public Object applyWithdraw(HttpServletRequest request) {
		
		String userId = "";
		String amount = "";
		String withdrawType = "";//1 支付宝  2 微信

		JsonResult result = new JsonResult(false, SysMsgEnum.FAIL.getCode(), SysMsgEnum.FAIL.message());
		try {
			userId= request.getParameter("userId");
			amount= request.getParameter("amount");
			withdrawType= request.getParameter("withdrawType");
			
			BaseResult baseResult = withdrawService.applyWithdraw(userId, amount, withdrawType);
			result.setErrMsg(baseResult.getMessage());
			result.setErrCode(baseResult.getCode());
			result.setBizSucc(baseResult.isSuccess());
			
		} catch (BaseRuntimeException e) {
			LogUtil.error(log, MessageFormat.format(
					"提现申请失败，userId:{0},message:{1}",
					new Object[] { userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		} catch (Exception e) {
			LogUtil.error(log, MessageFormat.format(
					"提现申请异常！userId:{0},message:{1}",
					new Object[] { userId, e.getMessage() }));
			return new JsonResult(false, "", e.getMessage());
		}
		return result;
	}
	
}
