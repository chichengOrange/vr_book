package com.onway.core.service.impl;

import javax.annotation.Resource;






import com.onway.common.lang.StringUtils;
import com.onway.core.service.CartService;
import com.onway.core.service.code.CodeGenerateComponent;
import com.onway.fyapp.common.dal.daointerface.CartDAO;
import com.onway.fyapp.common.dal.daointerface.ProductDAO;
import com.onway.fyapp.common.dal.daointerface.StockPriceDAO;
import com.onway.fyapp.common.dal.dataobject.CartDO;
import com.onway.fyapp.common.dal.dataobject.ProductDO;
import com.onway.fyapp.common.dal.dataobject.StockPriceDO;
import com.onway.model.enums.BizTypeEnum;
import com.onway.model.enums.CartStatusEnum;
import com.onway.model.enums.DeliveryTypeEnum;
import com.onway.platform.common.base.BaseResult;
import com.onway.platform.common.service.template.AbstractServiceImpl;
import com.onway.platform.common.service.template.ServiceCallback;
import com.onway.platform.common.service.template.ServiceCheckCallback;
import com.onway.platform.common.service.util.AssertUtil;
import com.onway.web.controller.result.JsonResult;

public class CartServiceImpl extends AbstractServiceImpl implements CartService {

	@Resource
	private CartDAO cartDAO;
	
	@Resource
	private StockPriceDAO stockPriceDAO;
	
	@Resource
	private ProductDAO productDAO;
	
	@Resource
	private CodeGenerateComponent codeGenerateComponent;
	@Override
	public BaseResult addCart(final String productId, final String userId,
			final String productNum, final String stockId) {
		// TODO Auto-generated method stub
		final BaseResult result = new BaseResult(true);
		serviceTemplate.execute(result, new ServiceCheckCallback() {
			
			@Override
			public void check() {
				// TODO Auto-generated method stub
				AssertUtil.notBlank(productId, "商品ID不能为空");
				AssertUtil.notBlank(userId, "用户ID不能为空");
				AssertUtil.notBlank(productNum, "商品数量不能为空");
			}
			
			@Override
			public void executeService() {
				// TODO Auto-generated method stub
				ProductDO productDO = null;
				//判断是否库存不足，有属性的商品
				int stockId_ = 0;
				if(StringUtils.isNotBlank(stockId)){
					stockId_ = Integer.parseInt(stockId);
					StockPriceDO stockPriceDO = stockPriceDAO.selectById(stockId_);
					if(stockPriceDO != null){
						if(stockPriceDO.getStock() - Integer.parseInt(productNum) < 0){
							result.setSuccess(false);
							result.setMessage("库存不足，当前库存为" + stockPriceDO.getStock());
						}
					}else{
						result.setSuccess(false);
						result.setMessage("商品属性不存在");
					}
				//没属性的商品
				}else{
				    productDO = productDAO.queryProductById(productId);
					if(productDO != null){
						if(productDO.getStock() - Integer.parseInt(productNum) < 0){
							result.setSuccess(false);
							result.setMessage("库存不足，当前库存为" + productDO.getStock());
						}
					}else{
						result.setSuccess(false);
						result.setMessage("商品不存在");
					}
				}
				
				//查看用户之前是否加入了此商品
				CartDO cartDO = cartDAO.queryCartByItem(userId, productId, stockId_, CartStatusEnum.DELETED.getCode());
				if(cartDO == null){
					CartDO cart = new CartDO();
					if(stockId_ != 0){
						StockPriceDO stockPriceDO = stockPriceDAO.selectById(stockId_);
						cart.setAttrIds(stockPriceDO.getAttrIds());
						cart.setAttrNames(stockPriceDO.getAttrNames());
						cart.setValueIds(stockPriceDO.getValueIds());
						cart.setValuees(stockPriceDO.getValuees());
					}
					cart.setCartId(codeGenerateComponent.nextCodeByType(BizTypeEnum.CART_ID));
					cart.setUserId(userId);
					cart.setProductId(productId);
					cart.setProductNum(Integer.parseInt(productNum));
					cart.setStatus(CartStatusEnum.INIT.getCode());
					cart.setDelivery(DeliveryTypeEnum.EXPRESS.getCode());
					cart.setStockId(stockId_);
					cart.setTeamId(productDO.getTeamId());
					cartDAO.insert(cart);
				}else{
					//已加入，更新数量
					cartDAO.updateProductNumByCartId(cartDO.getProductNum() + Integer.parseInt(productNum), cartDO.getCartId());
				}
			}

		});
		return result;
	}
	
	@Override
	public BaseResult delCart(final String cartId) {
		// TODO Auto-generated method stub
		final BaseResult result = new BaseResult(true);
		serviceTemplate.execute(result, new ServiceCheckCallback() {
			
			@Override
			public void check() {
				// TODO Auto-generated method stub
				AssertUtil.notBlank(cartId, "购物车编号不能为空");
			}
			
			@Override
			public void executeService() {
				// TODO Auto-generated method stub
				int del = cartDAO.updateCartStatusByCartId(CartStatusEnum.DELETED.getCode(), cartId);
				result.setSuccess(del > 0 ? true : false);
			}
		});
		return result;
	}

	@Override
	public BaseResult updateCartDelivery(final String cartId, final String delivery) {
		// TODO Auto-generated method stub
		final BaseResult result = new BaseResult(true);
		serviceTemplate.execute(result, new ServiceCheckCallback() {
			@Override
			public void check() {
				// TODO Auto-generated method stub
				AssertUtil.notBlank(cartId, "购物车编号不能为空");
				AssertUtil.notBlank(delivery, "配送方式不能为空");
			}

			@Override
			public void executeService() {
				// TODO Auto-generated method stub
				int update = cartDAO.updateCartDeliveryByCartId(delivery, cartId);
				result.setSuccess(update > 0 ? true : false);
			}
		});
		return result;
	}

}
