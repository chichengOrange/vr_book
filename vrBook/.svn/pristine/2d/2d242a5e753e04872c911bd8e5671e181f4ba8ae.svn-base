package com.onway.web.controller.product;

import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.onway.common.lang.CollectionUtils;
import com.onway.common.lang.StringUtils;
import com.onway.fyapp.common.dal.daointerface.GoodsAttrDAO;
import com.onway.fyapp.common.dal.daointerface.GoodsAttrValueDAO;
import com.onway.fyapp.common.dal.daointerface.ImgDAO;
import com.onway.fyapp.common.dal.daointerface.ProductDAO;
import com.onway.fyapp.common.dal.daointerface.StockPriceDAO;
import com.onway.fyapp.common.dal.dataobject.GoodsAttrDO;
import com.onway.fyapp.common.dal.dataobject.GoodsAttrValueDO;
import com.onway.fyapp.common.dal.dataobject.ImgDO;
import com.onway.fyapp.common.dal.dataobject.ProductDO;
import com.onway.fyapp.common.dal.dataobject.StockPriceDO;
import com.onway.fyapp.common.dal.dataobject.returnObj.GoodsAttrValueDOExt;
import com.onway.fyapp.common.dal.dataobject.returnObj.GoodsAttrValueSubDOExt;
import com.onway.fyapp.common.dal.dataobject.returnObj.ProductInfo;
import com.onway.fyapp.common.dal.dataobject.returnObj.StockPriceDOExt;
import com.onway.model.enums.DelFlgEnum;
import com.onway.model.enums.ImgTypeEnum;
import com.onway.platform.common.base.QueryResult;
import com.onway.platform.common.exception.BaseRuntimeException;
import com.onway.web.controller.AbstractController;
import com.onway.web.controller.result.GoodsDetailResult;
import com.onway.web.controller.result.JsonPageResult;
import com.onway.web.controller.result.JsonQueryResult;
import com.onway.web.controller.result.JsonResult;

/**
 * 
 * @author lishuaikai
 * @Description  商品控制类
 * @data 2018年6月27日 下午4:25:38
 */
@Controller
public class ProductController extends AbstractController{

	@Resource
	private ProductDAO  productDAO;
	
	@Resource
	private ImgDAO imgDAO;
	
	@Resource
	private StockPriceDAO stockPriceDAO;
	
	@Resource
	private GoodsAttrDAO goodsAttrDAO;
	@Resource
	private GoodsAttrValueDAO goodsAttrValueDAO;
	
	/**
	 * 商品列表
	 * @return
	 */
	@RequestMapping(value = "queryProduct.do")
	@ResponseBody
	public Object queryProduct(HttpServletRequest request){
		JsonPageResult<ProductInfo> result = new JsonPageResult<ProductInfo>(true);
		String productId = request.getParameter("productId");
		String teamId = request.getParameter("teamId");
		String productName = request.getParameter("productName");
		String fatherCate = request.getParameter("fatherCate");//商品分类 大类
		String childCate = request.getParameter("childCate");//商品分类 小类
		String fatherEfectCate = request.getParameter("fatherEfectCate");// 功效分类 大类
		String childEfectCate = request.getParameter("childEfectCate");// 功效分类 小类
		String salesSort = request.getParameter("salesSort");//销量排序    salesDesc, salesAsc      
		String priceSort = request.getParameter("priceSort");//价格排序     priceDesc, priceAsc
		String leastPrice = request.getParameter("leastPrice");//最低价
		String mostPrice = request.getParameter("mostPrice");//最高价
		String proType = request.getParameter("proType");
		try {
			int pageNum = adjustPageNo(request);
			int pageSize = adjustPageSize(request);
			int offset = (pageNum - 1) * pageSize;
			int count = productDAO.queryProductCountByItem( teamId, productName, fatherCate, childCate, 
					fatherEfectCate, childEfectCate, salesSort, priceSort, leastPrice, mostPrice, DelFlgEnum.NOT_DEL.getCode(), proType);
			
			List<ProductDO> productList = productDAO.queryProductByItem( teamId, 
					productName, fatherCate, childCate, fatherEfectCate, childEfectCate, salesSort, 
					priceSort, leastPrice, mostPrice, DelFlgEnum.NOT_DEL.getCode(), proType, offset, pageSize);
			List<ProductInfo> products = new ArrayList<ProductInfo>();
			//查询商品列表图片
			for (ProductDO productDO : productList) {
				ProductInfo info = new ProductInfo();
				info.setProductId(productDO.getProductId());
				info.setProductName(productDO.getProductName());
				info.setProductPrice(productDO.getProductPrice().getAmount().toString());
				info.setOldPrice(productDO.getOldPrice().getAmount().toString());
				info.setStock(productDO.getStock());
				info.setSales(productDO.getSales());
				info.setBrand(productDO.getBrand());
				info.setManufacturer(productDO.getManufacturer());
				info.setLicenseNo(productDO.getLicenseNo());
				info.setType(productDO.getType());
				info.setFatherCate(productDO.getFatherCate());
				info.setChildCate(productDO.getChildCate());
				info.setFatherEfectCate(productDO.getFatherEfectCate());
				info.setChildEfectCate(productDO.getChildEfectCate());
				info.setDelFlg(productDO.getDelFlg());
				info.setCreateTime(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(productDO.getGmtCreate()));
				//查询列表图片
				ImgDO imgDO = imgDAO.queryImgByProductIdAndType(productDO.getProductId(), ImgTypeEnum.LIST_IMG.getCode(), 
						DelFlgEnum.NOT_DEL.getCode());
				info.setImgList(imgDO.getImgUrl());
				products.add(info);
			}
			result.setListObject(products);
			result.setNext(count > pageNum * pageSize);
			result.setTotalPages(count % pageSize ==0 ? count / pageSize : (count / pageSize) + 1);
		} catch (BaseRuntimeException e) {
			// TODO: handle exception
			return new JsonResult(false, "", MessageFormat.format("查询商品异常：{0}", new Object[]{e.getMessage()}));
		}
		return result;
	}
	
	/**
	 * 查询商品详情
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "queryProductDetails.do")
	@ResponseBody
	public Object queryProductByProductId(HttpServletRequest request){
		JsonQueryResult<ProductInfo> result = new JsonQueryResult<ProductInfo>(true);
		String productId = request.getParameter("productId"); 
		
		try {
			ProductDO productDO = productDAO.queryProductById(productId);
			if (productDO!=null) {
				ProductInfo info = new ProductInfo();	
				info.setProductId(productDO.getProductId());
				info.setProductName(productDO.getProductName());
				info.setProductPrice(productDO.getProductPrice().getAmount().toString());
				info.setOldPrice(productDO.getOldPrice().getAmount().toString());
				info.setStock(productDO.getStock());
				info.setSales(productDO.getSales());
				info.setBrand(productDO.getBrand());
				info.setManufacturer(productDO.getManufacturer());
				info.setLicenseNo(productDO.getLicenseNo());
				info.setType(productDO.getType());
				info.setFatherCate(productDO.getFatherCate());
				info.setChildCate(productDO.getChildCate());
				info.setFatherEfectCate(productDO.getFatherEfectCate());
				info.setChildEfectCate(productDO.getChildEfectCate());
				info.setDelFlg(productDO.getDelFlg());
				info.setCreateTime(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(productDO.getGmtCreate()));
				//列表图片
				ImgDO imgDO = imgDAO.queryImgByProductIdAndType(productDO.getProductId(), ImgTypeEnum.LIST_IMG.getCode(), 
						DelFlgEnum.NOT_DEL.getCode());
				info.setImgList(imgDO.getImgUrl());
				//头部图片
				List<String> headImgs = new ArrayList<String>();
				ImgDO headImgDO = imgDAO.queryImgByProductIdAndType(productId, ImgTypeEnum.HEAD_IMG.getCode(), 
						DelFlgEnum.NOT_DEL.getCode());
				String imgList = headImgDO.getImgUrl();
				if(StringUtils.isNotBlank(imgList)){
                    JSONArray parseArray = JSONArray.parseArray(imgList);
                    for (Object object : parseArray) {
                    	headImgs.add(object + "");
					}
                    info.setHeadImgList(headImgs);
				}
				//详情图片
				ImgDO detailsImgDO = imgDAO.queryImgByProductIdAndType(productDO.getProductId(), ImgTypeEnum.DETAILS_IMG.getCode(), 
						DelFlgEnum.NOT_DEL.getCode());
				info.setImgDetails(detailsImgDO.getImgUrl());
				
				//查询商品属性库存价格
				// 通过商品编号查询priceStocks
				List<StockPriceDO> stockPriceDOs = stockPriceDAO
						.selectByGoodsNo(productId);
				
				// 获取属性IDs
				Set<String> attrIdSet = new TreeSet<String>();
				List<String> attrIdList = new ArrayList<String>();
				StringBuffer sbAttrid = new StringBuffer();
				// 获取属性值Ids
				Set<String> attrValueIdSet = new TreeSet<String>();
				List<String> attrValueIdList = new ArrayList<String>();
				StringBuffer attrValueId = new StringBuffer();

				if (CollectionUtils.isNotEmpty(stockPriceDOs)) {
					List<StockPriceDOExt> stockPriceDOExts = new ArrayList<StockPriceDOExt>();
					int valueStock = 0;
					for (StockPriceDO temp : stockPriceDOs) {
						StockPriceDOExt stockPriceDOExt = new StockPriceDOExt();
						stockPriceDOExt.setValueIds(temp.getValueIds());
						stockPriceDOExt.setValuees(temp.getValuees());
						stockPriceDOExt.setImgSrc(temp.getImgSrc());
						stockPriceDOExt.setPrice(temp.getPrice().getAmount());
						stockPriceDOExt.setStock(temp.getStock());
						stockPriceDOExt.setStockId(temp.getId());
						stockPriceDOExts.add(stockPriceDOExt);
						//所有属性
						sbAttrid.append(temp.getAttrIds()).append(",");
						//所有属性值
						attrValueId.append(temp.getValueIds()).append(",");
						valueStock += temp.getStock();
					}
					info.setPriceStocks(stockPriceDOExts);
					info.setStock(valueStock);
					String[] attrIdArray = sbAttrid.toString().split(",");
					for (int i = 0; i < attrIdArray.length; i++) {
						attrIdSet.add(attrIdArray[i]);
					}

					String[] attrValueArray = attrValueId.toString().split(",");
					for (int i = 0; i < attrValueArray.length; i++) {
						attrValueIdSet.add(attrValueArray[i]);
					}
					attrIdList.addAll(attrIdSet);
					attrValueIdList.addAll(attrValueIdSet);

					// 【2】 获取属性列表
					List<GoodsAttrDO> goodsAttrDOs = goodsAttrDAO
							.selectByAttrIds(attrIdList);
					if (info.getPriceStocks().size() != 0) {
						if (CollectionUtils.isNotEmpty(goodsAttrDOs)) {
							List<GoodsAttrValueDOExt> attrAndValuees = new ArrayList<GoodsAttrValueDOExt>();

							for (GoodsAttrDO goodsAttrDO : goodsAttrDOs) {
								//根据此商品所有的属性值id和属性ID获取商品属性
								List<GoodsAttrValueDO> goodsAttrValueDOs = goodsAttrValueDAO
										.selectByIds(attrValueIdList,
												goodsAttrDO.getId() + "");
								if (CollectionUtils
										.isNotEmpty(goodsAttrValueDOs)) {
									GoodsAttrValueDOExt goodsAttrValueDOExt = new GoodsAttrValueDOExt();

									// 子属性 集合
									List<GoodsAttrValueSubDOExt> goodsAttrValueSubDOExts = new ArrayList<GoodsAttrValueSubDOExt>();

									for (GoodsAttrValueDO temp : goodsAttrValueDOs) {
										GoodsAttrValueSubDOExt subAttrValue = new GoodsAttrValueSubDOExt();

										subAttrValue.setAttrId(temp.getId());
										subAttrValue.setValue(null == temp
												.getValue() ? "" : temp
												.getValue());

										goodsAttrValueSubDOExts
												.add(subAttrValue);
									}

									// 设置attrAndValuees: attrName，valuees
									if (CollectionUtils
											.isNotEmpty(goodsAttrValueSubDOExts)) {
										goodsAttrValueDOExt
												.setAttrId(goodsAttrDO.getId());
										goodsAttrValueDOExt
												.setAttrName(goodsAttrDO
														.getAttrName());
										goodsAttrValueDOExt
												.setValuees(goodsAttrValueSubDOExts);
									}
									attrAndValuees.add(goodsAttrValueDOExt);
								}
							}
							info.setAttrAndValuees(attrAndValuees);
						}
					}
				}
				result.setObj(info);
			}
		} catch (BaseRuntimeException e) {
			// TODO: handle exception
			return new JsonResult(false, "", MessageFormat.format("查询商品异常：{0}", new Object[]{e.getMessage()}));
		}
		return result;
	}
	
	@RequestMapping(value= "test2.do")
	@ResponseBody
	public Object test(HttpServletRequest request){
		GoodsDetailResult item = new GoodsDetailResult();
 
		// 通过商品编号查询priceStocks
		List<StockPriceDO> stockPriceDOs = stockPriceDAO
				.selectByGoodsNo("001");
		
		// 获取属性IDs
		Set<String> attrIdSet = new TreeSet<String>();
		List<String> attrIdList = new ArrayList<String>();
		StringBuffer sbAttrid = new StringBuffer();
		// 获取属性值Ids
		Set<String> attrValueIdSet = new TreeSet<String>();
		List<String> attrValueIdList = new ArrayList<String>();
		StringBuffer attrValueId = new StringBuffer();

		if (CollectionUtils.isNotEmpty(stockPriceDOs)) {
			List<StockPriceDOExt> stockPriceDOExts = new ArrayList<StockPriceDOExt>();
			int valueStock = 0;
			for (StockPriceDO temp : stockPriceDOs) {
				StockPriceDOExt stockPriceDOExt = new StockPriceDOExt();
				stockPriceDOExt.setValueIds(temp.getValueIds());
				stockPriceDOExt.setValuees(temp.getValuees());
				stockPriceDOExt.setImgSrc(temp.getImgSrc());
				stockPriceDOExt.setPrice(temp.getPrice().getAmount());
				stockPriceDOExt.setStock(temp.getStock());
				stockPriceDOExt.setStockId(temp.getId());
				stockPriceDOExts.add(stockPriceDOExt);
				sbAttrid.append(temp.getAttrIds()).append(",");
				attrValueId.append(temp.getValueIds()).append(",");
				valueStock += temp.getStock();
			}
			item.setPriceStocks(stockPriceDOExts);
			item.setStock(valueStock);
			String[] attrIdArray = sbAttrid.toString().split(",");
			for (int i = 0; i < attrIdArray.length; i++) {
				attrIdSet.add(attrIdArray[i]);
			}

			String[] attrValueArray = attrValueId.toString().split(",");
			for (int i = 0; i < attrValueArray.length; i++) {
				attrValueIdSet.add(attrValueArray[i]);
			}
			attrIdList.addAll(attrIdSet);
			attrValueIdList.addAll(attrValueIdSet);

			// 【2】 获取属性列表
			// 通过类别获取属性列表(属性attrId,属性名称)
			/*
			 * List<GoodsAttrDO> goodsAttrDOs = goodsAttrDAO
			 * .selectByCatNo(goodDO.getCatNo());
			 */
			List<GoodsAttrDO> goodsAttrDOs = goodsAttrDAO
					.selectByAttrIds(attrIdList);
			if (item.getPriceStocks().size() != 0) {
				if (CollectionUtils.isNotEmpty(goodsAttrDOs)) {
					List<GoodsAttrValueDOExt> attrAndValuees = new ArrayList<GoodsAttrValueDOExt>();

					for (GoodsAttrDO goodsAttrDO : goodsAttrDOs) {
						// 通过属性attrId, 获取子属性值 int 属性值名 String(多个)
						// List<GoodsAttrValueDO> goodsAttrValueDOs =
						// goodsAttrValueDAO.selectAttrByAttrNo(goodsAttrDO.getId()+
						// "");
						List<GoodsAttrValueDO> goodsAttrValueDOs = goodsAttrValueDAO
								.selectByIds(attrValueIdList,
										goodsAttrDO.getId() + "");
						if (CollectionUtils
								.isNotEmpty(goodsAttrValueDOs)) {
							GoodsAttrValueDOExt goodsAttrValueDOExt = new GoodsAttrValueDOExt();

							// 子属性 集合
							List<GoodsAttrValueSubDOExt> goodsAttrValueSubDOExts = new ArrayList<GoodsAttrValueSubDOExt>();

							for (GoodsAttrValueDO temp : goodsAttrValueDOs) {
								GoodsAttrValueSubDOExt subAttrValue = new GoodsAttrValueSubDOExt();

								subAttrValue.setAttrId(temp.getId());
								subAttrValue.setValue(null == temp
										.getValue() ? "" : temp
										.getValue());

								goodsAttrValueSubDOExts
										.add(subAttrValue);
							}

							// 设置attrAndValuees: attrName，valuees
							if (CollectionUtils
									.isNotEmpty(goodsAttrValueSubDOExts)) {
								goodsAttrValueDOExt
										.setAttrId(goodsAttrDO.getId());
								goodsAttrValueDOExt
										.setAttrName(goodsAttrDO
												.getAttrName());
								goodsAttrValueDOExt
										.setValuees(goodsAttrValueSubDOExts);
							}
							attrAndValuees.add(goodsAttrValueDOExt);
						}
					}
					item.setAttrAndValuees(attrAndValuees);
				}
			}
		}
		return item;
	}
	
	/**
	 * 猜你喜欢
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "guessLike.do")
	@ResponseBody
	public Object guessLike(HttpServletRequest request){
		JsonPageResult<ProductInfo> result = new JsonPageResult<ProductInfo>(true);
		String userId = request.getParameter("userId");
		try {
			int pageNum = adjustPageNo(request);
			int pageSize = adjustPageSize(request);
			int offset = (pageNum - 1) * pageSize;
			int count = productService.guessLikeCount(userId);
			QueryResult<List<ProductInfo>> queryResult = productService.guessLike(userId, offset, pageSize);
			result.setBizSucc(queryResult.isSuccess());
			result.setListObject(queryResult.getResultObject());
			result.setNext(count > pageNum * pageSize);
			result.setTotalPages(count % pageSize ==0 ? count / pageSize : (count / pageSize) + 1);
		} catch (BaseRuntimeException e) {
			// TODO: handle exception
			return new JsonResult(false, "", MessageFormat.format("查询商品异常：{0}", new Object[]{e.getMessage()}));
		}
		return result;
	}
	
}
