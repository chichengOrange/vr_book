<?xml version="1.0" encoding="GB2312" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>onway-gen-dal</tt>, a DAL (Data Access Layer)    -->
<!-- code generation utility specially developed for <tt>onway</tt> project.        -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>onway-gen-dal</tt> to generate this file.                                  -->
<!--                                                                               -->
<!-- @author guangdong.li                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="onway">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table dxs_user_account -->
    <resultMap id="RM-USER-ACCOUNT" class="com.onway.dxsmng.common.dal.dataobject.UserAccountDO">
		<result property="id" column="ID"  javaType="int" jdbcType="INT"  nullValue="0"/>
		<result property="userId" column="USER_ID"  javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="learnPointAmount.cent" column="LEARN_POINT_AMOUNT"  javaType="long" jdbcType="DECIMAL" />
		<result property="rechargeLearnPoint.cent" column="RECHARGE_LEARN_POINT"  javaType="long" jdbcType="DECIMAL" />
		<result property="earnLearnPoint.cent" column="EARN_LEARN_POINT"  javaType="long" jdbcType="DECIMAL" />
		<result property="learnCoinAmount.cent" column="LEARN_COIN_AMOUNT"  javaType="long" jdbcType="DECIMAL" />
		<result property="learnCoin.cent" column="LEARN_COIN"  javaType="long" jdbcType="DECIMAL" />
		<result property="payPassword" column="PAY_PASSWORD"  javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="creater" column="CREATER"  javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="gmtCreate" column="GMT_CREATE"  javaType="java.util.Date" jdbcType="DATETIME" />
		<result property="modifier" column="MODIFIER"  javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="gmtModified" column="GMT_MODIFIED"  javaType="java.util.Date" jdbcType="DATETIME" />
		<result property="memo" column="MEMO"  javaType="java.lang.String" jdbcType="VARCHAR" />
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisUserAccountDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisUserAccountDAO.adduseraccount -->
    <insert id="MS-USER-ACCOUNT-ADDUSERACCOUNT">
    <![CDATA[
        insert into dxs_user_account(user_id,CREATER,GMT_CREATE) values (#userId#, #creater#, #gmtCreate#)
    ]]>
	<selectKey resultClass="int" keyProperty="id">
       select last_insert_id() as id
    </selectKey>
    </insert>

    <!-- mapped statement for IbatisUserAccountDAO.checkcertificationtoupdateuseraccount -->
    <update id="MS-USER-ACCOUNT-CHECKCERTIFICATIONTOUPDATEUSERACCOUNT">
        update dxs_user_account set RECHARGE_LEARN_POINT= #addRechargeLearn#,
				LEARN_POINT_AMOUNT = #addAllAmount#,MODIFIER=#modifier#,GMT_MODIFIED = #gmtmodified#  
				where USER_ID = #userid#
    </update>

    <!-- mapped statement for IbatisUserAccountDAO.checkwithdrawal -->
    <update id="MS-USER-ACCOUNT-CHECKWITHDRAWAL">
    <![CDATA[
        update dxs_user_account set LEARN_COIN=#learnCoin.cent# where (USER_ID = #userId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisUserAccountDAO.changeCanUsePoint -->
    <update id="MS-USER-ACCOUNT-CHANGE-CAN-USE-POINT">
    <![CDATA[
        update dxs_user_account set LEARN_POINT_AMOUNT=#learnPointAmount.cent#, RECHARGE_LEARN_POINT=#rechargeLearnPoint.cent#, GMT_MODIFIED=CURRENT_TIMESTAMP where (USER_ID = #userId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisUserAccountDAO.queryUserAccountInfo -->
			 <select id="MS-USER-ACCOUNT-QUERY-USER-ACCOUNT-INFO" resultMap="RM-USER-ACCOUNT">
	        SELECT
				ID,
				USER_ID,
				LEARN_POINT_AMOUNT,
				RECHARGE_LEARN_POINT,
				EARN_LEARN_POINT,
				LEARN_COIN_AMOUNT,
				LEARN_COIN,
				PAY_PASSWORD,
				CREATER,
				GMT_CREATE,
				MODIFIER,
				GMT_MODIFIED,
				MEMO
			FROM dxs_user_account
			WHERE 1=1
            <isNotEmpty property="userId" prepend="and">
	                 USER_ID = #userId#
	        </isNotEmpty>
    </select>

    <!-- mapped statement for IbatisUserAccountDAO.changeCanUsePointMng -->
    <update id="MS-USER-ACCOUNT-CHANGE-CAN-USE-POINT-MNG">
    <![CDATA[
        update dxs_user_account set LEARN_POINT_AMOUNT=#learnPointAmount.cent#, RECHARGE_LEARN_POINT=#rechargeLearnPoint.cent#, MODIFIER=#modifier#, GMT_MODIFIED=CURRENT_TIMESTAMP where (USER_ID = #userId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisUserAccountDAO.changgeCoinBalanceMng -->
    <update id="MS-USER-ACCOUNT-CHANGGE-COIN-BALANCE-MNG">
    <![CDATA[
        update dxs_user_account set LEARN_COIN_AMOUNT=#learnCoinAmount.cent#, LEARN_COIN=#learnCoin.cent#, MODIFIER=#modifier#, GMT_MODIFIED=CURRENT_TIMESTAMP where (USER_ID = #userId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisUserAccountDAO.userAccountPointAndCoin -->
	<select id="MS-USER-ACCOUNT-USER-ACCOUNT-POINT-AND-COIN" resultClass="java.util.HashMap">
	        select ua.*,DATE_FORMAT(ua.GMT_MODIFIED,'%Y-%m-%d %H:%i:%s') GMT_MODIFIED,u.NICK_NAME,u.CELL
				from dxs_user_account ua
				LEFT JOIN dxs_user u ON ua.USER_ID = u.USER_ID
				where 1=1 
				<isNotEmpty property="userId">
	    			AND ua.USER_ID like '%$userId$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="nickname">
	    			AND u.NICK_NAME like '%$nickname$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="cell">
	    			AND u.CELL like '%$cell$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="starpdate">
	    			AND ua.GMT_MODIFIED &gt;= #starpdate#
	    		</isNotEmpty>
	    		<isNotEmpty property="enddate">
	    			AND ua.GMT_MODIFIED &lt;= #enddate#
	    		</isNotEmpty>
	    		order by ua.GMT_MODIFIED desc 
	    		<isNotEmpty property="offset">
	    			LIMIT $offset$, $limit$
	    		</isNotEmpty>
    </select>

    <!-- mapped statement for IbatisUserAccountDAO.userAccountPointAndCoinCount -->
			 <select id="MS-USER-ACCOUNT-USER-ACCOUNT-POINT-AND-COIN-COUNT" resultClass="int">
	        select count(1) 
				from dxs_user_account ua
				LEFT JOIN dxs_user u ON ua.USER_ID = u.USER_ID
				where 1=1 
				<isNotEmpty property="userId">
	    			AND ua.USER_ID like '%$userId$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="nickname">
	    			AND u.NICK_NAME like '%$nickname$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="cell">
	    			AND u.CELL like '%$cell$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="starpdate">
	    			AND ua.GMT_MODIFIED &gt;= #starpdate#
	    		</isNotEmpty>
	    		<isNotEmpty property="enddate">
	    			AND ua.GMT_MODIFIED &lt;= #enddate#
	    		</isNotEmpty>
    </select>

    <!-- mapped statement for IbatisUserAccountDAO.userAccountPointAndCoinALLAmount -->
	<select id="MS-USER-ACCOUNT-USER-ACCOUNT-POINT-AND-COIN-ALL-AMOUNT" resultClass="java.util.HashMap">
	        SELECT 
				SUM(LEARN_POINT_AMOUNT) LEARN_POINT_AMOUNT,
				SUM(RECHARGE_LEARN_POINT) RECHARGE_LEARN_POINT,
				SUM(EARN_LEARN_POINT) EARN_LEARN_POINT,
				SUM(LEARN_COIN_AMOUNT) LEARN_COIN_AMOUNT,
				SUM(LEARN_COIN) LEARN_COIN,
				SUM(RECHARGE_LEARN_POINT + EARN_LEARN_POINT) ALL_POINT
				FROM
				dxs_user_account
    </select>

</sqlMap>