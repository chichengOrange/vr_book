/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.onway.fyapp.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.onway.fyapp.common.dal.daointerface.UserDAO;

import com.onway.fyapp.common.dal.dataobject.UserDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.HashMap;

import java.util.Map;

/**
 * An ibatis based implementation of dao interface <tt>com.onway.fyapp.common.dal.daointerface.UserDAO</tt>.
 *
 * This file is generated by <tt>onway-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>onway</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/vr_user.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>onway-gen-dal</tt> 
 * to generate this file.
 *
 * @author guangdong.li
 * @version $Id: IbatisUserDAO.java,v 1.0 2013/10/29 07:34:20 guangdong.li Exp $
 */
public class IbatisUserDAO extends SqlMapClientDaoSupport implements UserDAO {
	/**
	 *  Insert one <tt>UserDO</tt> object to DB table <tt>vr_user</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into vr_user(USER_ID,USER_NAME,OPEN_ID,HEAD_URL,CELL,PSW,PROVINCE,CITY,AREA,STATUS,GMT_CREATE,GMT_MODIFIED) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)</tt>
	 *
	 *	@param user
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   adduser(UserDO user) throws DataAccessException {
    	if (user == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-USER-ADDUSER", user);

        return user.getId();
    }

	/**
	 *  Query DB table <tt>vr_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from vr_user where (1 = 1)</tt>
	 *
	 *	@param userName
	 *	@param cell
	 *	@param status
	 *	@param offset
	 *	@param limit
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 
    public  List<Map<String,Object>>   selectuser(String userName, String cell, String status, int offset, int limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userName", userName);
        param.put("cell", cell);
        param.put("status", status);
        param.put("offset", new Integer(offset));
        param.put("limit", new Integer(limit));

        return getSqlMapClientTemplate().queryForList("MS-USER-SELECTUSER", param);

    }

	/**
	 *  Query DB table <tt>vr_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(1) from vr_user where (1 = 1)</tt>
	 *
	 *	@param userName
	 *	@param cell
	 *	@param status
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   queryListCount(String userName, String cell, String status) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userName", userName);
        param.put("cell", cell);
        param.put("status", status);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-USER-QUERY-LIST-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Delete records from DB table <tt>vr_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from vr_user where (ID = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   deletUserbyid(int id) throws DataAccessException {
        Integer param = new Integer(id);

        return getSqlMapClientTemplate().delete("MS-USER-DELET-USERBYID", param);
    }

	/**
	 *  Query DB table <tt>vr_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(1) from vr_user</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public  long   selectTodayUser() throws DataAccessException {


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-USER-SELECT-TODAY-USER", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>vr_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(1) from vr_user</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public  long   selectMonthUser() throws DataAccessException {


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-USER-SELECT-MONTH-USER", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>vr_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(1) from vr_user</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public  long   selectQuarterUser() throws DataAccessException {


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-USER-SELECT-QUARTER-USER", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}