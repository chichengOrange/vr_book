/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.onway.fyapp.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.onway.fyapp.common.dal.daointerface.BookDAO;

import com.onway.fyapp.common.dal.dataobject.BookDO;
import java.util.List;
import org.springframework.dao.DataAccessException;
import com.onway.common.lang.Money;

import java.util.Map;
import java.util.HashMap;

/**
 * An ibatis based implementation of dao interface <tt>com.onway.fyapp.common.dal.daointerface.BookDAO</tt>.
 *
 * This file is generated by <tt>onway-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>onway</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/vr_book.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>onway-gen-dal</tt> 
 * to generate this file.
 *
 * @author guangdong.li
 * @version $Id: IbatisBookDAO.java,v 1.0 2013/10/29 07:34:20 guangdong.li Exp $
 */
public class IbatisBookDAO extends SqlMapClientDaoSupport implements BookDAO {
	/**
	 *  Query DB table <tt>vr_book</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select ID, BOOK_ID, BOOK_NAME, BOOK_IMG, BOOK_AUTHOR, BOOK_PUBLISH, BOOK_SIZE, BOOK_HEAT, NOW_NETWORK, DOWNLOAD_URL, DOWNLOAD_COUNT, CAN_DOWNLOAD, PRICE, SORT, DISTRIBUTOR, GMT_CREATE, GMT_MODIFIED from vr_book</tt>
	 *
	 *	@return List<BookDO>
	 *	@throws DataAccessException
	 */	 
    public  List<BookDO>   loadAllBook() throws DataAccessException {


        return getSqlMapClientTemplate().queryForList("MS-BOOK-LOAD-ALL-BOOK", null);

    }

	/**
	 *  Query DB table <tt>vr_book</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from vr_book</tt>
	 *
	 *	@param bookId
	 *	@param bookName
	 *	@param bookPublish
	 *	@param bookAuthor
	 *	@param distributor
	 *	@param offset
	 *	@param limit
	 *	@return List<BookDO>
	 *	@throws DataAccessException
	 */	 
    public  List<BookDO>   selectAllBook(String bookId, String bookName, String bookPublish, String bookAuthor, String distributor, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("bookId", bookId);
        param.put("bookName", bookName);
        param.put("bookPublish", bookPublish);
        param.put("bookAuthor", bookAuthor);
        param.put("distributor", distributor);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-BOOK-SELECT-ALL-BOOK", param);

    }

	/**
	 *  Query DB table <tt>vr_book</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from vr_book</tt>
	 *
	 *	@param bookId
	 *	@param bookName
	 *	@param bookPublish
	 *	@param bookAuthor
	 *	@param distributor
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   selectallbookcount(String bookId, String bookName, String bookPublish, String bookAuthor, String distributor) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("bookId", bookId);
        param.put("bookName", bookName);
        param.put("bookPublish", bookPublish);
        param.put("bookAuthor", bookAuthor);
        param.put("distributor", distributor);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-BOOK-SELECTALLBOOKCOUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Delete records from DB table <tt>vr_book</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from vr_book where (ID = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   deletbookbyid(int id) throws DataAccessException {
        Integer param = new Integer(id);

        return getSqlMapClientTemplate().delete("MS-BOOK-DELETBOOKBYID", param);
    }

	/**
	 *  Insert one <tt>BookDO</tt> object to DB table <tt>vr_book</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into vr_book(BOOK_ID,BOOK_NAME,BOOK_IMG,BOOK_AUTHOR,BOOK_PUBLISH,BOOK_SIZE,BOOK_HEAT,DOWNLOAD_URL,DOWNLOAD_COUNT,CAN_DOWNLOAD,PRICE,SORT,DISTRIBUTOR,GMT_CREATE,GMT_MODIFIED) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)</tt>
	 *
	 *	@param book
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   insertbook(BookDO book) throws DataAccessException {
    	if (book == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-BOOK-INSERTBOOK", book);

        return book.getId();
    }

	/**
	 *  Query DB table <tt>vr_book</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select ID, BOOK_ID, BOOK_NAME, BOOK_IMG, BOOK_AUTHOR, BOOK_PUBLISH, BOOK_SIZE, BOOK_HEAT, NOW_NETWORK, DOWNLOAD_URL, DOWNLOAD_COUNT, CAN_DOWNLOAD, PRICE, SORT, GMT_CREATE, GMT_MODIFIED from vr_book where (ID = ?)</tt>
	 *
	 *	@param id
	 *	@return BookDO
	 *	@throws DataAccessException
	 */	 
    public  BookDO   selectBookById(int id) throws DataAccessException {

        Integer param = new Integer(id);

	        return (BookDO) getSqlMapClientTemplate().queryForObject("MS-BOOK-SELECT-BOOK-BY-ID", param);
		
    }

	/**
	 *  Update DB table <tt>vr_book</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update vr_book set BOOK_NAME=?, BOOK_AUTHOR=?, BOOK_PUBLISH=?, BOOK_SIZE=?, DOWNLOAD_URL=?, CAN_DOWNLOAD=?, PRICE=?, SORT=?, DOWNLOAD_COUNT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ID = ?)</tt>
	 *
	 *	@param bookName
	 *	@param bookAuthor
	 *	@param bookPublish
	 *	@param bookSize
	 *	@param downloadUrl
	 *	@param canDownload
	 *	@param price
	 *	@param sort
	 *	@param downloadCount
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updatBookNoImg(String bookName, String bookAuthor, String bookPublish, String bookSize, String downloadUrl, int canDownload, Money price, int sort, int downloadCount, int id) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("bookName", bookName);
        param.put("bookAuthor", bookAuthor);
        param.put("bookPublish", bookPublish);
        param.put("bookSize", bookSize);
        param.put("downloadUrl", downloadUrl);
        param.put("canDownload", new Integer(canDownload));
        param.put("price", price);
        param.put("sort", new Integer(sort));
        param.put("downloadCount", new Integer(downloadCount));
        param.put("id", new Integer(id));

        return getSqlMapClientTemplate().update("MS-BOOK-UPDAT-BOOK-NO-IMG", param);
    }

	/**
	 *  Update DB table <tt>vr_book</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update vr_book set BOOK_NAME=?, BOOK_AUTHOR=?, BOOK_PUBLISH=?, BOOK_IMG=?, CAN_DOWNLOAD=?, PRICE=?, SORT=?, DOWNLOAD_COUNT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ID = ?)</tt>
	 *
	 *	@param bookName
	 *	@param bookAuthor
	 *	@param bookPublish
	 *	@param bookImg
	 *	@param canDownload
	 *	@param price
	 *	@param sort
	 *	@param downloadCount
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updatBookNofile(String bookName, String bookAuthor, String bookPublish, String bookImg, int canDownload, Money price, int sort, int downloadCount, int id) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("bookName", bookName);
        param.put("bookAuthor", bookAuthor);
        param.put("bookPublish", bookPublish);
        param.put("bookImg", bookImg);
        param.put("canDownload", new Integer(canDownload));
        param.put("price", price);
        param.put("sort", new Integer(sort));
        param.put("downloadCount", new Integer(downloadCount));
        param.put("id", new Integer(id));

        return getSqlMapClientTemplate().update("MS-BOOK-UPDAT-BOOK-NOFILE", param);
    }

	/**
	 *  Update DB table <tt>vr_book</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update vr_book set BOOK_NAME=?, BOOK_AUTHOR=?, BOOK_PUBLISH=?, CAN_DOWNLOAD=?, PRICE=?, SORT=?, DOWNLOAD_COUNT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ID = ?)</tt>
	 *
	 *	@param bookName
	 *	@param bookAuthor
	 *	@param bookPublish
	 *	@param canDownload
	 *	@param price
	 *	@param sort
	 *	@param downloadCount
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updatBookNoTwo(String bookName, String bookAuthor, String bookPublish, int canDownload, Money price, int sort, int downloadCount, int id) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("bookName", bookName);
        param.put("bookAuthor", bookAuthor);
        param.put("bookPublish", bookPublish);
        param.put("canDownload", new Integer(canDownload));
        param.put("price", price);
        param.put("sort", new Integer(sort));
        param.put("downloadCount", new Integer(downloadCount));
        param.put("id", new Integer(id));

        return getSqlMapClientTemplate().update("MS-BOOK-UPDAT-BOOK-NO-TWO", param);
    }

	/**
	 *  Update DB table <tt>vr_book</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update vr_book set BOOK_NAME=?, BOOK_AUTHOR=?, BOOK_PUBLISH=?, BOOK_IMG=?, BOOK_SIZE=?, DOWNLOAD_URL=?, CAN_DOWNLOAD=?, PRICE=?, SORT=?, DOWNLOAD_COUNT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ID = ?)</tt>
	 *
	 *	@param bookName
	 *	@param bookAuthor
	 *	@param bookPublish
	 *	@param bookImg
	 *	@param bookSize
	 *	@param downloadUrl
	 *	@param canDownload
	 *	@param price
	 *	@param sort
	 *	@param downloadCount
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updatBook(String bookName, String bookAuthor, String bookPublish, String bookImg, String bookSize, String downloadUrl, int canDownload, Money price, int sort, int downloadCount, int id) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("bookName", bookName);
        param.put("bookAuthor", bookAuthor);
        param.put("bookPublish", bookPublish);
        param.put("bookImg", bookImg);
        param.put("bookSize", bookSize);
        param.put("downloadUrl", downloadUrl);
        param.put("canDownload", new Integer(canDownload));
        param.put("price", price);
        param.put("sort", new Integer(sort));
        param.put("downloadCount", new Integer(downloadCount));
        param.put("id", new Integer(id));

        return getSqlMapClientTemplate().update("MS-BOOK-UPDAT-BOOK", param);
    }

	/**
	 *  Update DB table <tt>vr_book</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update vr_book set BOOK_SIZE=?, DOWNLOAD_URL=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (BOOK_ID = ?)</tt>
	 *
	 *	@param bookSize
	 *	@param downloadUrl
	 *	@param bookId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updatBookUrl(String bookSize, String downloadUrl, String bookId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("bookSize", bookSize);
        param.put("downloadUrl", downloadUrl);
        param.put("bookId", bookId);

        return getSqlMapClientTemplate().update("MS-BOOK-UPDAT-BOOK-URL", param);
    }

}