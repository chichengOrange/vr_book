<?xml version="1.0" encoding="GB2312" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>onway-gen-dal</tt>, a DAL (Data Access Layer)    -->
<!-- code generation utility specially developed for <tt>onway</tt> project.        -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>onway-gen-dal</tt> to generate this file.                                  -->
<!--                                                                               -->
<!-- @author guangdong.li                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="onway">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table dxs_complaint_reporting -->
    <resultMap id="RM-COMPLAINT-REPORTING" class="com.onway.dxsmng.common.dal.dataobject.ComplaintReportingDO">
		<result property="id" column="ID"  javaType="int" jdbcType="INT"  nullValue="0"/>
		<result property="userId" column="USER_ID"  javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="type" column="TYPE"  javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="reason" column="REASON"  javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="status" column="STATUS"  javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="dynamicId" column="DYNAMIC_ID"  javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="reportedUserId" column="REPORTED_USER_ID"  javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="creater" column="CREATER"  javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="gmtCreate" column="GMT_CREATE"  javaType="java.util.Date" jdbcType="DATETIME" />
		<result property="modifier" column="MODIFIER"  javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="gmtModified" column="GMT_MODIFIED"  javaType="java.util.Date" jdbcType="DATETIME" />
		<result property="memo" column="MEMO"  javaType="java.lang.String" jdbcType="VARCHAR" />
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisComplaintReportingDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisComplaintReportingDAO.selectallcomplaintreporting -->
	<select id="MS-COMPLAINT-REPORTING-SELECTALLCOMPLAINTREPORTING" resultClass="java.util.HashMap">
	        select du.USER_NAME,du.NICK_NAME,du.CELL,
				cdu.USER_NAME CUSER_NAME,cdu.NICK_NAME CNICK_NAME,cdu.CELL CCELL,
				dcr.* 
				from dxs_complaint_reporting dcr 
				left join dxs_user du on dcr.USER_ID = du.USER_ID  
				left join  dxs_user cdu on dcr.REPORTED_USER_ID = cdu.USER_ID 
				where dcr.TYPE in('COM_USER','REP_USER')  
				<isNotEmpty property="username">
	    			AND du.USER_NAME like '%$username$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="reusername">
	    			AND cdu.USER_NAME like '%$reusername$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="recell">
	    			AND cdu.CELL = #recell#
	    		</isNotEmpty>
	    		<isNotEmpty property="retype">
	    			AND dcr.TYPE = #retype#
	    		</isNotEmpty>
	    		<isNotEmpty property="renickname">
	    			AND cdu.NICK_NAME like '%$renickname$%'
	    		</isNotEmpty>
	    		
	    		<isNotEmpty property="status">
	    			AND dcr.status = #status#
	    		</isNotEmpty>
	    		order by dcr.GMT_CREATE desc 
	    		LIMIT $offset$, $limit$
    </select>

    <!-- mapped statement for IbatisComplaintReportingDAO.selectallcomplaintreportingcount -->
			 <select id="MS-COMPLAINT-REPORTING-SELECTALLCOMPLAINTREPORTINGCOUNT" resultClass="int">
	        select count(1) 
				from dxs_complaint_reporting dcr 
				left join dxs_user du on dcr.USER_ID = du.USER_ID  
				left join  dxs_user cdu on dcr.REPORTED_USER_ID = cdu.USER_ID 
				where dcr.TYPE in('COM_USER','REP_USER')  
				<isNotEmpty property="username">
	    			AND du.USER_NAME like '%$username$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="reusername">
	    			AND cdu.USER_NAME like '%$reusername$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="recell">
	    			AND cdu.CELL = #recell#
	    		</isNotEmpty>
	    		<isNotEmpty property="retype">
	    			AND dcr.TYPE = #retype#
	    		</isNotEmpty>
	    		<isNotEmpty property="renickname">
	    			AND cdu.NICK_NAME like '%$renickname$%'
	    		</isNotEmpty>
	    		
	    		<isNotEmpty property="status">
	    			AND dcr.status = #status#
	    		</isNotEmpty>
    </select>

    <!-- mapped statement for IbatisComplaintReportingDAO.updatestatuscomplaintreporting -->
    <update id="MS-COMPLAINT-REPORTING-UPDATESTATUSCOMPLAINTREPORTING">
    <![CDATA[
        update dxs_complaint_reporting set STATUS=#status#, MEMO=#memo#, MODIFIER=#modifier#, GMT_MODIFIED=#gmtModified# where (id = #id#)
    ]]>
    </update>

    <!-- mapped statement for IbatisComplaintReportingDAO.selectallcomplaintreportingdynamic -->
	<select id="MS-COMPLAINT-REPORTING-SELECTALLCOMPLAINTREPORTINGDYNAMIC" resultClass="java.util.HashMap">
	        select du.USER_NAME,du.NICK_NAME,du.CELL,
				ddu.USER_NAME DUSER_NAME,ddu.NICK_NAME DNICK_NAME,ddu.CELL DCELL,
				dcr.*,dds.DYNAMIC_WORD,dds.DYNAMIC_IMG,dds.TYPE DDSTYPE,dds.DYNAMIC_TYPE DYNAMIC_TYPE
				from dxs_complaint_reporting dcr 
				left join dxs_user du on dcr.USER_ID  = du.USER_ID
				left join dxs_dynamic_state dds on dcr.DYNAMIC_ID = dds.DYNAMIC_ID  
				left join  dxs_user ddu on dds.USER_ID = ddu.USER_ID 
				where dcr.TYPE in('COM_DYNA','REP_DYNA') 
				<isNotEmpty property="username">
	    			AND du.USER_NAME like '%$username$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="dusername">
	    			AND ddu.USER_NAME like '%$dusername$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="type">
	    			AND dcr.TYPE = #type#
	    		</isNotEmpty>
	    		<isNotEmpty property="status">
	    			AND dcr.status = #status#
	    		</isNotEmpty>
	    		order by dcr.GMT_CREATE desc 
	    		LIMIT $offset$, $limit$
    </select>

    <!-- mapped statement for IbatisComplaintReportingDAO.selectallcomplaintreportingdynamiccount -->
			 <select id="MS-COMPLAINT-REPORTING-SELECTALLCOMPLAINTREPORTINGDYNAMICCOUNT" resultClass="int">
	        select count(1)
				from dxs_complaint_reporting dcr 
				left join dxs_user du on dcr.USER_ID  = du.USER_ID
				left join dxs_dynamic_state dds on dcr.DYNAMIC_ID = dds.DYNAMIC_ID  
				left join  dxs_user ddu on dds.USER_ID = ddu.USER_ID 
				where dcr.TYPE in('COM_DYNA','REP_DYNA') 
				<isNotEmpty property="username">
	    			AND du.USER_NAME like '%$username$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="dusername">
	    			AND ddu.USER_NAME like '%$dusername$%'
	    		</isNotEmpty>
	    		<isNotEmpty property="type">
	    			AND dcr.TYPE = #type#
	    		</isNotEmpty>
	    		<isNotEmpty property="status">
	    			AND dcr.status = #status#
	    		</isNotEmpty>
    </select>

</sqlMap>